

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu Jan 18 11:51:19 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     7                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2,noexec
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	maintext,global,class=CODE,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	intentry,global,class=CODE,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    41                           	dabs	1,0x7E,2
    42     0000                     
    43                           ; Generated 22/03/2023 GMT
    44                           ; 
    45                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution. Publication is not required when
    59                           ;        this file is used in an embedded application.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC16F887 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77     0000                     	;# 
    78     0001                     	;# 
    79     0002                     	;# 
    80     0003                     	;# 
    81     0004                     	;# 
    82     0005                     	;# 
    83     0006                     	;# 
    84     0007                     	;# 
    85     0008                     	;# 
    86     0009                     	;# 
    87     000A                     	;# 
    88     000B                     	;# 
    89     000C                     	;# 
    90     000D                     	;# 
    91     000E                     	;# 
    92     000E                     	;# 
    93     000F                     	;# 
    94     0010                     	;# 
    95     0011                     	;# 
    96     0012                     	;# 
    97     0013                     	;# 
    98     0014                     	;# 
    99     0015                     	;# 
   100     0015                     	;# 
   101     0016                     	;# 
   102     0017                     	;# 
   103     0018                     	;# 
   104     0019                     	;# 
   105     001A                     	;# 
   106     001B                     	;# 
   107     001B                     	;# 
   108     001C                     	;# 
   109     001D                     	;# 
   110     001E                     	;# 
   111     001F                     	;# 
   112     0081                     	;# 
   113     0085                     	;# 
   114     0086                     	;# 
   115     0087                     	;# 
   116     0088                     	;# 
   117     0089                     	;# 
   118     008C                     	;# 
   119     008D                     	;# 
   120     008E                     	;# 
   121     008F                     	;# 
   122     0090                     	;# 
   123     0091                     	;# 
   124     0092                     	;# 
   125     0093                     	;# 
   126     0093                     	;# 
   127     0093                     	;# 
   128     0094                     	;# 
   129     0095                     	;# 
   130     0096                     	;# 
   131     0097                     	;# 
   132     0098                     	;# 
   133     0099                     	;# 
   134     009A                     	;# 
   135     009B                     	;# 
   136     009C                     	;# 
   137     009D                     	;# 
   138     009E                     	;# 
   139     009F                     	;# 
   140     0105                     	;# 
   141     0107                     	;# 
   142     0108                     	;# 
   143     0109                     	;# 
   144     010C                     	;# 
   145     010C                     	;# 
   146     010D                     	;# 
   147     010E                     	;# 
   148     010F                     	;# 
   149     0185                     	;# 
   150     0187                     	;# 
   151     0188                     	;# 
   152     0189                     	;# 
   153     018C                     	;# 
   154     018D                     	;# 
   155     0000                     	;# 
   156     0001                     	;# 
   157     0002                     	;# 
   158     0003                     	;# 
   159     0004                     	;# 
   160     0005                     	;# 
   161     0006                     	;# 
   162     0007                     	;# 
   163     0008                     	;# 
   164     0009                     	;# 
   165     000A                     	;# 
   166     000B                     	;# 
   167     000C                     	;# 
   168     000D                     	;# 
   169     000E                     	;# 
   170     000E                     	;# 
   171     000F                     	;# 
   172     0010                     	;# 
   173     0011                     	;# 
   174     0012                     	;# 
   175     0013                     	;# 
   176     0014                     	;# 
   177     0015                     	;# 
   178     0015                     	;# 
   179     0016                     	;# 
   180     0017                     	;# 
   181     0018                     	;# 
   182     0019                     	;# 
   183     001A                     	;# 
   184     001B                     	;# 
   185     001B                     	;# 
   186     001C                     	;# 
   187     001D                     	;# 
   188     001E                     	;# 
   189     001F                     	;# 
   190     0081                     	;# 
   191     0085                     	;# 
   192     0086                     	;# 
   193     0087                     	;# 
   194     0088                     	;# 
   195     0089                     	;# 
   196     008C                     	;# 
   197     008D                     	;# 
   198     008E                     	;# 
   199     008F                     	;# 
   200     0090                     	;# 
   201     0091                     	;# 
   202     0092                     	;# 
   203     0093                     	;# 
   204     0093                     	;# 
   205     0093                     	;# 
   206     0094                     	;# 
   207     0095                     	;# 
   208     0096                     	;# 
   209     0097                     	;# 
   210     0098                     	;# 
   211     0099                     	;# 
   212     009A                     	;# 
   213     009B                     	;# 
   214     009C                     	;# 
   215     009D                     	;# 
   216     009E                     	;# 
   217     009F                     	;# 
   218     0105                     	;# 
   219     0107                     	;# 
   220     0108                     	;# 
   221     0109                     	;# 
   222     010C                     	;# 
   223     010C                     	;# 
   224     010D                     	;# 
   225     010E                     	;# 
   226     010F                     	;# 
   227     0185                     	;# 
   228     0187                     	;# 
   229     0188                     	;# 
   230     0189                     	;# 
   231     018C                     	;# 
   232     018D                     	;# 
   233     0000                     	;# 
   234     0001                     	;# 
   235     0002                     	;# 
   236     0003                     	;# 
   237     0004                     	;# 
   238     0005                     	;# 
   239     0006                     	;# 
   240     0007                     	;# 
   241     0008                     	;# 
   242     0009                     	;# 
   243     000A                     	;# 
   244     000B                     	;# 
   245     000C                     	;# 
   246     000D                     	;# 
   247     000E                     	;# 
   248     000E                     	;# 
   249     000F                     	;# 
   250     0010                     	;# 
   251     0011                     	;# 
   252     0012                     	;# 
   253     0013                     	;# 
   254     0014                     	;# 
   255     0015                     	;# 
   256     0015                     	;# 
   257     0016                     	;# 
   258     0017                     	;# 
   259     0018                     	;# 
   260     0019                     	;# 
   261     001A                     	;# 
   262     001B                     	;# 
   263     001B                     	;# 
   264     001C                     	;# 
   265     001D                     	;# 
   266     001E                     	;# 
   267     001F                     	;# 
   268     0081                     	;# 
   269     0085                     	;# 
   270     0086                     	;# 
   271     0087                     	;# 
   272     0088                     	;# 
   273     0089                     	;# 
   274     008C                     	;# 
   275     008D                     	;# 
   276     008E                     	;# 
   277     008F                     	;# 
   278     0090                     	;# 
   279     0091                     	;# 
   280     0092                     	;# 
   281     0093                     	;# 
   282     0093                     	;# 
   283     0093                     	;# 
   284     0094                     	;# 
   285     0095                     	;# 
   286     0096                     	;# 
   287     0097                     	;# 
   288     0098                     	;# 
   289     0099                     	;# 
   290     009A                     	;# 
   291     009B                     	;# 
   292     009C                     	;# 
   293     009D                     	;# 
   294     009E                     	;# 
   295     009F                     	;# 
   296     0105                     	;# 
   297     0107                     	;# 
   298     0108                     	;# 
   299     0109                     	;# 
   300     010C                     	;# 
   301     010C                     	;# 
   302     010D                     	;# 
   303     010E                     	;# 
   304     010F                     	;# 
   305     0185                     	;# 
   306     0187                     	;# 
   307     0188                     	;# 
   308     0189                     	;# 
   309     018C                     	;# 
   310     018D                     	;# 
   311     0000                     	;# 
   312     0001                     	;# 
   313     0002                     	;# 
   314     0003                     	;# 
   315     0004                     	;# 
   316     0005                     	;# 
   317     0006                     	;# 
   318     0007                     	;# 
   319     0008                     	;# 
   320     0009                     	;# 
   321     000A                     	;# 
   322     000B                     	;# 
   323     000C                     	;# 
   324     000D                     	;# 
   325     000E                     	;# 
   326     000E                     	;# 
   327     000F                     	;# 
   328     0010                     	;# 
   329     0011                     	;# 
   330     0012                     	;# 
   331     0013                     	;# 
   332     0014                     	;# 
   333     0015                     	;# 
   334     0015                     	;# 
   335     0016                     	;# 
   336     0017                     	;# 
   337     0018                     	;# 
   338     0019                     	;# 
   339     001A                     	;# 
   340     001B                     	;# 
   341     001B                     	;# 
   342     001C                     	;# 
   343     001D                     	;# 
   344     001E                     	;# 
   345     001F                     	;# 
   346     0081                     	;# 
   347     0085                     	;# 
   348     0086                     	;# 
   349     0087                     	;# 
   350     0088                     	;# 
   351     0089                     	;# 
   352     008C                     	;# 
   353     008D                     	;# 
   354     008E                     	;# 
   355     008F                     	;# 
   356     0090                     	;# 
   357     0091                     	;# 
   358     0092                     	;# 
   359     0093                     	;# 
   360     0093                     	;# 
   361     0093                     	;# 
   362     0094                     	;# 
   363     0095                     	;# 
   364     0096                     	;# 
   365     0097                     	;# 
   366     0098                     	;# 
   367     0099                     	;# 
   368     009A                     	;# 
   369     009B                     	;# 
   370     009C                     	;# 
   371     009D                     	;# 
   372     009E                     	;# 
   373     009F                     	;# 
   374     0105                     	;# 
   375     0107                     	;# 
   376     0108                     	;# 
   377     0109                     	;# 
   378     010C                     	;# 
   379     010C                     	;# 
   380     010D                     	;# 
   381     010E                     	;# 
   382     010F                     	;# 
   383     0185                     	;# 
   384     0187                     	;# 
   385     0188                     	;# 
   386     0189                     	;# 
   387     018C                     	;# 
   388     018D                     	;# 
   389                           
   390                           	psect	idataCOMMON
   391     0EBE                     __pidataCOMMON:
   392                           
   393                           ;initializer for _miniCount
   394     0EBE  3403               	retlw	3
   395     0EBF  3400               	retlw	0
   396                           
   397                           	psect	idataBANK0
   398     0EE6                     __pidataBANK0:
   399                           
   400                           ;initializer for main@F1490
   401     0EE6  3449               	retlw	73
   402     0EE7  344E               	retlw	78
   403     0EE8  3450               	retlw	80
   404     0EE9  3455               	retlw	85
   405     0EEA  3454               	retlw	84
   406     0EEB  343A               	retlw	58
   407     0EEC  3430               	retlw	48
   408     0EED  3420               	retlw	32
   409                           
   410                           ;initializer for _switchLeds
   411     0EEE  3401               	retlw	1
   412     0EEF  3400               	retlw	0
   413                           
   414                           ;initializer for _count
   415     0EF0  3401               	retlw	1
   416     0EF1  3400               	retlw	0
   417                           
   418                           ;initializer for _nummerOffset
   419     0EF2  3430               	retlw	48
   420                           
   421                           	psect	idataBANK1
   422     07F7                     __pidataBANK1:
   423                           
   424                           ;initializer for main@F1492
   425     07F7  3456               	retlw	86
   426     07F8  344F               	retlw	79
   427     07F9  344C               	retlw	76
   428     07FA  343A               	retlw	58
   429     07FB  3430               	retlw	48
   430     07FC  3420               	retlw	32
   431     07FD  3420               	retlw	32
   432     07FE  3420               	retlw	32
   433                           
   434                           	psect	stringtext
   435     0100                     __pstringtext:
   436     0100                     stringtab:
   437     0100                     __stringtab:
   438                           
   439                           ;	String table - string pointers are 2 bytes each
   440     0100  1BFF               	btfsc	btemp+1,7
   441     0101  290A               	ljmp	stringcode
   442     0102  1383               	bcf	3,7
   443     0103  187F               	btfsc	btemp+1,0
   444     0104  1783               	bsf	3,7
   445     0105  0800               	movf	0,w
   446     0106  0A84               	incf	4,f
   447     0107  1903               	skipnz
   448     0108  0AFF               	incf	btemp+1,f
   449     0109  0008               	return
   450     010A                     stringcode:
   451     010A  087F               	movf	btemp+1,w
   452     010B  397F               	andlw	127
   453     010C  008A               	movwf	10
   454     010D  0804               	movf	4,w
   455     010E  0A84               	incf	4,f
   456     010F  1903               	skipnz
   457     0110  0AFF               	incf	btemp+1,f
   458     0111  0082               	movwf	2
   459     0112                     __stringbase:
   460     0112                     __end_of__stringtab:
   461     0112                     _ascii:
   462     0112  3408               	retlw	8
   463     0113  341C               	retlw	28
   464     0114  343E               	retlw	62
   465     0115  347F               	retlw	127
   466     0116  3400               	retlw	0
   467     0117  3430               	retlw	48
   468     0118  3435               	retlw	53
   469     0119  3448               	retlw	72
   470     011A  3440               	retlw	64
   471     011B  3430               	retlw	48
   472     011C  3445               	retlw	69
   473     011D  3429               	retlw	41
   474     011E  3411               	retlw	17
   475     011F  3421               	retlw	33
   476     0120  347D               	retlw	125
   477     0121  347D               	retlw	125
   478     0122  3409               	retlw	9
   479     0123  3405               	retlw	5
   480     0124  3405               	retlw	5
   481     0125  3479               	retlw	121
   482     0126  347D               	retlw	125
   483     0127  3409               	retlw	9
   484     0128  3411               	retlw	17
   485     0129  3421               	retlw	33
   486     012A  347D               	retlw	125
   487     012B  3438               	retlw	56
   488     012C  3444               	retlw	68
   489     012D  3444               	retlw	68
   490     012E  3438               	retlw	56
   491     012F  3444               	retlw	68
   492     0130  347E               	retlw	126
   493     0131  3401               	retlw	1
   494     0132  3429               	retlw	41
   495     0133  342E               	retlw	46
   496     0134  3410               	retlw	16
   497     0135  3430               	retlw	48
   498     0136  344A               	retlw	74
   499     0137  344D               	retlw	77
   500     0138  3449               	retlw	73
   501     0139  3430               	retlw	48
   502     013A  3460               	retlw	96
   503     013B  3450               	retlw	80
   504     013C  3448               	retlw	72
   505     013D  3450               	retlw	80
   506     013E  3460               	retlw	96
   507     013F  341E               	retlw	30
   508     0140  3404               	retlw	4
   509     0141  3404               	retlw	4
   510     0142  3438               	retlw	56
   511     0143  3440               	retlw	64
   512     0144  343E               	retlw	62
   513     0145  3449               	retlw	73
   514     0146  3449               	retlw	73
   515     0147  3449               	retlw	73
   516     0148  343E               	retlw	62
   517     0149  3462               	retlw	98
   518     014A  3414               	retlw	20
   519     014B  3408               	retlw	8
   520     014C  3410               	retlw	16
   521     014D  3460               	retlw	96
   522     014E  3440               	retlw	64
   523     014F  343C               	retlw	60
   524     0150  3420               	retlw	32
   525     0151  3420               	retlw	32
   526     0152  341C               	retlw	28
   527     0153  3408               	retlw	8
   528     0154  347C               	retlw	124
   529     0155  3404               	retlw	4
   530     0156  347C               	retlw	124
   531     0157  3402               	retlw	2
   532     0158  3438               	retlw	56
   533     0159  3444               	retlw	68
   534     015A  3444               	retlw	68
   535     015B  343C               	retlw	60
   536     015C  3404               	retlw	4
   537     015D  3441               	retlw	65
   538     015E  3463               	retlw	99
   539     015F  3455               	retlw	85
   540     0160  3449               	retlw	73
   541     0161  3441               	retlw	65
   542     0162  3410               	retlw	16
   543     0163  3408               	retlw	8
   544     0164  3478               	retlw	120
   545     0165  3408               	retlw	8
   546     0166  3404               	retlw	4
   547     0167  3418               	retlw	24
   548     0168  3424               	retlw	36
   549     0169  347E               	retlw	126
   550     016A  3424               	retlw	36
   551     016B  3418               	retlw	24
   552     016C  345E               	retlw	94
   553     016D  3461               	retlw	97
   554     016E  3401               	retlw	1
   555     016F  3461               	retlw	97
   556     0170  345E               	retlw	94
   557     0171  3478               	retlw	120
   558     0172  3414               	retlw	20
   559     0173  3415               	retlw	21
   560     0174  3414               	retlw	20
   561     0175  3478               	retlw	120
   562     0176  3438               	retlw	56
   563     0177  3444               	retlw	68
   564     0178  3445               	retlw	69
   565     0179  343C               	retlw	60
   566     017A  3440               	retlw	64
   567     017B  3478               	retlw	120
   568     017C  3415               	retlw	21
   569     017D  3414               	retlw	20
   570     017E  3415               	retlw	21
   571     017F  3478               	retlw	120
   572     0180  3438               	retlw	56
   573     0181  3445               	retlw	69
   574     0182  3444               	retlw	68
   575     0183  343D               	retlw	61
   576     0184  3440               	retlw	64
   577     0185  343C               	retlw	60
   578     0186  3443               	retlw	67
   579     0187  3442               	retlw	66
   580     0188  3443               	retlw	67
   581     0189  343C               	retlw	60
   582     018A  3438               	retlw	56
   583     018B  3445               	retlw	69
   584     018C  3444               	retlw	68
   585     018D  3445               	retlw	69
   586     018E  3438               	retlw	56
   587     018F  343C               	retlw	60
   588     0190  3441               	retlw	65
   589     0191  3440               	retlw	64
   590     0192  3441               	retlw	65
   591     0193  343C               	retlw	60
   592     0194  3438               	retlw	56
   593     0195  3442               	retlw	66
   594     0196  3440               	retlw	64
   595     0197  3442               	retlw	66
   596     0198  3438               	retlw	56
   597     0199  3408               	retlw	8
   598     019A  3408               	retlw	8
   599     019B  342A               	retlw	42
   600     019C  341C               	retlw	28
   601     019D  3408               	retlw	8
   602     019E  3420               	retlw	32
   603     019F  347E               	retlw	126
   604     01A0  3402               	retlw	2
   605     01A1  3402               	retlw	2
   606     01A2  3402               	retlw	2
   607     01A3  3412               	retlw	18
   608     01A4  3419               	retlw	25
   609     01A5  3415               	retlw	21
   610     01A6  3412               	retlw	18
   611     01A7  3400               	retlw	0
   612     01A8  3448               	retlw	72
   613     01A9  347E               	retlw	126
   614     01AA  3449               	retlw	73
   615     01AB  3441               	retlw	65
   616     01AC  3442               	retlw	66
   617     01AD  3401               	retlw	1
   618     01AE  3412               	retlw	18
   619     01AF  347C               	retlw	124
   620     01B0  3412               	retlw	18
   621     01B1  3401               	retlw	1
   622     01B2  3400               	retlw	0
   623     01B3  3400               	retlw	0
   624     01B4  3400               	retlw	0
   625     01B5  3400               	retlw	0
   626     01B6  3400               	retlw	0
   627     01B7  3400               	retlw	0
   628     01B8  3400               	retlw	0
   629     01B9  345F               	retlw	95
   630     01BA  3400               	retlw	0
   631     01BB  3400               	retlw	0
   632     01BC  3400               	retlw	0
   633     01BD  3403               	retlw	3
   634     01BE  3400               	retlw	0
   635     01BF  3403               	retlw	3
   636     01C0  3400               	retlw	0
   637     01C1  3414               	retlw	20
   638     01C2  347F               	retlw	127
   639     01C3  3414               	retlw	20
   640     01C4  347F               	retlw	127
   641     01C5  3414               	retlw	20
   642     01C6  3424               	retlw	36
   643     01C7  342A               	retlw	42
   644     01C8  347F               	retlw	127
   645     01C9  342A               	retlw	42
   646     01CA  3412               	retlw	18
   647     01CB  3423               	retlw	35
   648     01CC  3413               	retlw	19
   649     01CD  3408               	retlw	8
   650     01CE  3464               	retlw	100
   651     01CF  3462               	retlw	98
   652     01D0  3436               	retlw	54
   653     01D1  3449               	retlw	73
   654     01D2  3456               	retlw	86
   655     01D3  3420               	retlw	32
   656     01D4  3450               	retlw	80
   657     01D5  3400               	retlw	0
   658     01D6  340B               	retlw	11
   659     01D7  3407               	retlw	7
   660     01D8  3400               	retlw	0
   661     01D9  3400               	retlw	0
   662     01DA  3400               	retlw	0
   663     01DB  3400               	retlw	0
   664     01DC  343E               	retlw	62
   665     01DD  3441               	retlw	65
   666     01DE  3400               	retlw	0
   667     01DF  3400               	retlw	0
   668     01E0  3441               	retlw	65
   669     01E1  343E               	retlw	62
   670     01E2  3400               	retlw	0
   671     01E3  3400               	retlw	0
   672     01E4  3408               	retlw	8
   673     01E5  342A               	retlw	42
   674     01E6  341C               	retlw	28
   675     01E7  342A               	retlw	42
   676     01E8  3408               	retlw	8
   677     01E9  3408               	retlw	8
   678     01EA  3408               	retlw	8
   679     01EB  343E               	retlw	62
   680     01EC  3408               	retlw	8
   681     01ED  3408               	retlw	8
   682     01EE  3400               	retlw	0
   683     01EF  3458               	retlw	88
   684     01F0  3438               	retlw	56
   685     01F1  3400               	retlw	0
   686     01F2  3400               	retlw	0
   687     01F3  3408               	retlw	8
   688     01F4  3408               	retlw	8
   689     01F5  3408               	retlw	8
   690     01F6  3408               	retlw	8
   691     01F7  3408               	retlw	8
   692     01F8  3400               	retlw	0
   693     01F9  3430               	retlw	48
   694     01FA  3430               	retlw	48
   695     01FB  3400               	retlw	0
   696     01FC  3400               	retlw	0
   697     01FD  3420               	retlw	32
   698     01FE  3410               	retlw	16
   699     01FF  3408               	retlw	8
   700     0200  3404               	retlw	4
   701     0201  3402               	retlw	2
   702     0202  343E               	retlw	62
   703     0203  3451               	retlw	81
   704     0204  3449               	retlw	73
   705     0205  3445               	retlw	69
   706     0206  343E               	retlw	62
   707     0207  3400               	retlw	0
   708     0208  3442               	retlw	66
   709     0209  347F               	retlw	127
   710     020A  3440               	retlw	64
   711     020B  3400               	retlw	0
   712     020C  3462               	retlw	98
   713     020D  3451               	retlw	81
   714     020E  3449               	retlw	73
   715     020F  3449               	retlw	73
   716     0210  3446               	retlw	70
   717     0211  3422               	retlw	34
   718     0212  3441               	retlw	65
   719     0213  3449               	retlw	73
   720     0214  3449               	retlw	73
   721     0215  3436               	retlw	54
   722     0216  3418               	retlw	24
   723     0217  3414               	retlw	20
   724     0218  3412               	retlw	18
   725     0219  347F               	retlw	127
   726     021A  3410               	retlw	16
   727     021B  3427               	retlw	39
   728     021C  3445               	retlw	69
   729     021D  3445               	retlw	69
   730     021E  3445               	retlw	69
   731     021F  3439               	retlw	57
   732     0220  343C               	retlw	60
   733     0221  344A               	retlw	74
   734     0222  3449               	retlw	73
   735     0223  3449               	retlw	73
   736     0224  3430               	retlw	48
   737     0225  3401               	retlw	1
   738     0226  3471               	retlw	113
   739     0227  3409               	retlw	9
   740     0228  3405               	retlw	5
   741     0229  3403               	retlw	3
   742     022A  3436               	retlw	54
   743     022B  3449               	retlw	73
   744     022C  3449               	retlw	73
   745     022D  3449               	retlw	73
   746     022E  3437               	retlw	55
   747     022F  3406               	retlw	6
   748     0230  3449               	retlw	73
   749     0231  3449               	retlw	73
   750     0232  3429               	retlw	41
   751     0233  341E               	retlw	30
   752     0234  3400               	retlw	0
   753     0235  3436               	retlw	54
   754     0236  3436               	retlw	54
   755     0237  3400               	retlw	0
   756     0238  3400               	retlw	0
   757     0239  3400               	retlw	0
   758     023A  345B               	retlw	91
   759     023B  343B               	retlw	59
   760     023C  3400               	retlw	0
   761     023D  3400               	retlw	0
   762     023E  3400               	retlw	0
   763     023F  3408               	retlw	8
   764     0240  3414               	retlw	20
   765     0241  3422               	retlw	34
   766     0242  3441               	retlw	65
   767     0243  3414               	retlw	20
   768     0244  3414               	retlw	20
   769     0245  3414               	retlw	20
   770     0246  3414               	retlw	20
   771     0247  3414               	retlw	20
   772     0248  3441               	retlw	65
   773     0249  3422               	retlw	34
   774     024A  3414               	retlw	20
   775     024B  3408               	retlw	8
   776     024C  3400               	retlw	0
   777     024D  3402               	retlw	2
   778     024E  3401               	retlw	1
   779     024F  3451               	retlw	81
   780     0250  3409               	retlw	9
   781     0251  3406               	retlw	6
   782     0252  343E               	retlw	62
   783     0253  3441               	retlw	65
   784     0254  345D               	retlw	93
   785     0255  3455               	retlw	85
   786     0256  341E               	retlw	30
   787     0257  347E               	retlw	126
   788     0258  3409               	retlw	9
   789     0259  3409               	retlw	9
   790     025A  3409               	retlw	9
   791     025B  347E               	retlw	126
   792     025C  347E               	retlw	126
   793     025D  3449               	retlw	73
   794     025E  3449               	retlw	73
   795     025F  3449               	retlw	73
   796     0260  3436               	retlw	54
   797     0261  343E               	retlw	62
   798     0262  3441               	retlw	65
   799     0263  3441               	retlw	65
   800     0264  3441               	retlw	65
   801     0265  3422               	retlw	34
   802     0266  347F               	retlw	127
   803     0267  3441               	retlw	65
   804     0268  3441               	retlw	65
   805     0269  3441               	retlw	65
   806     026A  343E               	retlw	62
   807     026B  347F               	retlw	127
   808     026C  3449               	retlw	73
   809     026D  3449               	retlw	73
   810     026E  3449               	retlw	73
   811     026F  3441               	retlw	65
   812     0270  347F               	retlw	127
   813     0271  3409               	retlw	9
   814     0272  3409               	retlw	9
   815     0273  3409               	retlw	9
   816     0274  3401               	retlw	1
   817     0275  343E               	retlw	62
   818     0276  3441               	retlw	65
   819     0277  3441               	retlw	65
   820     0278  3451               	retlw	81
   821     0279  3432               	retlw	50
   822     027A  347F               	retlw	127
   823     027B  3408               	retlw	8
   824     027C  3408               	retlw	8
   825     027D  3408               	retlw	8
   826     027E  347F               	retlw	127
   827     027F  3400               	retlw	0
   828     0280  3441               	retlw	65
   829     0281  347F               	retlw	127
   830     0282  3441               	retlw	65
   831     0283  3400               	retlw	0
   832     0284  3420               	retlw	32
   833     0285  3440               	retlw	64
   834     0286  3440               	retlw	64
   835     0287  3440               	retlw	64
   836     0288  343F               	retlw	63
   837     0289  347F               	retlw	127
   838     028A  3408               	retlw	8
   839     028B  3414               	retlw	20
   840     028C  3422               	retlw	34
   841     028D  3441               	retlw	65
   842     028E  347F               	retlw	127
   843     028F  3440               	retlw	64
   844     0290  3440               	retlw	64
   845     0291  3440               	retlw	64
   846     0292  3440               	retlw	64
   847     0293  347F               	retlw	127
   848     0294  3402               	retlw	2
   849     0295  340C               	retlw	12
   850     0296  3402               	retlw	2
   851     0297  347F               	retlw	127
   852     0298  347F               	retlw	127
   853     0299  3404               	retlw	4
   854     029A  3408               	retlw	8
   855     029B  3410               	retlw	16
   856     029C  347F               	retlw	127
   857     029D  343E               	retlw	62
   858     029E  3441               	retlw	65
   859     029F  3441               	retlw	65
   860     02A0  3441               	retlw	65
   861     02A1  343E               	retlw	62
   862     02A2  347F               	retlw	127
   863     02A3  3409               	retlw	9
   864     02A4  3409               	retlw	9
   865     02A5  3409               	retlw	9
   866     02A6  3406               	retlw	6
   867     02A7  343E               	retlw	62
   868     02A8  3441               	retlw	65
   869     02A9  3451               	retlw	81
   870     02AA  3421               	retlw	33
   871     02AB  345E               	retlw	94
   872     02AC  347F               	retlw	127
   873     02AD  3409               	retlw	9
   874     02AE  3419               	retlw	25
   875     02AF  3429               	retlw	41
   876     02B0  3446               	retlw	70
   877     02B1  3426               	retlw	38
   878     02B2  3449               	retlw	73
   879     02B3  3449               	retlw	73
   880     02B4  3449               	retlw	73
   881     02B5  3432               	retlw	50
   882     02B6  3401               	retlw	1
   883     02B7  3401               	retlw	1
   884     02B8  347F               	retlw	127
   885     02B9  3401               	retlw	1
   886     02BA  3401               	retlw	1
   887     02BB  343F               	retlw	63
   888     02BC  3440               	retlw	64
   889     02BD  3440               	retlw	64
   890     02BE  3440               	retlw	64
   891     02BF  343F               	retlw	63
   892     02C0  3407               	retlw	7
   893     02C1  3418               	retlw	24
   894     02C2  3460               	retlw	96
   895     02C3  3418               	retlw	24
   896     02C4  3407               	retlw	7
   897     02C5  347F               	retlw	127
   898     02C6  3420               	retlw	32
   899     02C7  3418               	retlw	24
   900     02C8  3420               	retlw	32
   901     02C9  347F               	retlw	127
   902     02CA  3463               	retlw	99
   903     02CB  3414               	retlw	20
   904     02CC  3408               	retlw	8
   905     02CD  3414               	retlw	20
   906     02CE  3463               	retlw	99
   907     02CF  3403               	retlw	3
   908     02D0  3404               	retlw	4
   909     02D1  3478               	retlw	120
   910     02D2  3404               	retlw	4
   911     02D3  3403               	retlw	3
   912     02D4  3461               	retlw	97
   913     02D5  3451               	retlw	81
   914     02D6  3449               	retlw	73
   915     02D7  3445               	retlw	69
   916     02D8  3443               	retlw	67
   917     02D9  3400               	retlw	0
   918     02DA  3400               	retlw	0
   919     02DB  347F               	retlw	127
   920     02DC  3441               	retlw	65
   921     02DD  3441               	retlw	65
   922     02DE  3402               	retlw	2
   923     02DF  3404               	retlw	4
   924     02E0  3408               	retlw	8
   925     02E1  3410               	retlw	16
   926     02E2  3420               	retlw	32
   927     02E3  3441               	retlw	65
   928     02E4  3441               	retlw	65
   929     02E5  347F               	retlw	127
   930     02E6  3400               	retlw	0
   931     02E7  3400               	retlw	0
   932     02E8  3404               	retlw	4
   933     02E9  3402               	retlw	2
   934     02EA  347F               	retlw	127
   935     02EB  3402               	retlw	2
   936     02EC  3404               	retlw	4
   937     02ED  3440               	retlw	64
   938     02EE  3440               	retlw	64
   939     02EF  3440               	retlw	64
   940     02F0  3440               	retlw	64
   941     02F1  3440               	retlw	64
   942     02F2  3400               	retlw	0
   943     02F3  3407               	retlw	7
   944     02F4  340B               	retlw	11
   945     02F5  3400               	retlw	0
   946     02F6  3400               	retlw	0
   947     02F7  3438               	retlw	56
   948     02F8  3444               	retlw	68
   949     02F9  3444               	retlw	68
   950     02FA  343C               	retlw	60
   951     02FB  3440               	retlw	64
   952     02FC  347F               	retlw	127
   953     02FD  3448               	retlw	72
   954     02FE  3444               	retlw	68
   955     02FF  3444               	retlw	68
   956     0300  3438               	retlw	56
   957     0301  3438               	retlw	56
   958     0302  3444               	retlw	68
   959     0303  3444               	retlw	68
   960     0304  3444               	retlw	68
   961     0305  3444               	retlw	68
   962     0306  3438               	retlw	56
   963     0307  3444               	retlw	68
   964     0308  3444               	retlw	68
   965     0309  3448               	retlw	72
   966     030A  347F               	retlw	127
   967     030B  3438               	retlw	56
   968     030C  3454               	retlw	84
   969     030D  3454               	retlw	84
   970     030E  3454               	retlw	84
   971     030F  3408               	retlw	8
   972     0310  3408               	retlw	8
   973     0311  347E               	retlw	126
   974     0312  3409               	retlw	9
   975     0313  3402               	retlw	2
   976     0314  3400               	retlw	0
   977     0315  3408               	retlw	8
   978     0316  3414               	retlw	20
   979     0317  3454               	retlw	84
   980     0318  3454               	retlw	84
   981     0319  343C               	retlw	60
   982     031A  347F               	retlw	127
   983     031B  3408               	retlw	8
   984     031C  3404               	retlw	4
   985     031D  3404               	retlw	4
   986     031E  3478               	retlw	120
   987     031F  3400               	retlw	0
   988     0320  3444               	retlw	68
   989     0321  347D               	retlw	125
   990     0322  3440               	retlw	64
   991     0323  3400               	retlw	0
   992     0324  3420               	retlw	32
   993     0325  3440               	retlw	64
   994     0326  3444               	retlw	68
   995     0327  343D               	retlw	61
   996     0328  3400               	retlw	0
   997     0329  3400               	retlw	0
   998     032A  347F               	retlw	127
   999     032B  3410               	retlw	16
  1000     032C  3428               	retlw	40
  1001     032D  3444               	retlw	68
  1002     032E  3400               	retlw	0
  1003     032F  3441               	retlw	65
  1004     0330  347F               	retlw	127
  1005     0331  3440               	retlw	64
  1006     0332  3400               	retlw	0
  1007     0333  3478               	retlw	120
  1008     0334  3404               	retlw	4
  1009     0335  3418               	retlw	24
  1010     0336  3404               	retlw	4
  1011     0337  3478               	retlw	120
  1012     0338  347C               	retlw	124
  1013     0339  3408               	retlw	8
  1014     033A  3404               	retlw	4
  1015     033B  3404               	retlw	4
  1016     033C  3478               	retlw	120
  1017     033D  3438               	retlw	56
  1018     033E  3444               	retlw	68
  1019     033F  3444               	retlw	68
  1020     0340  3444               	retlw	68
  1021     0341  3438               	retlw	56
  1022     0342  347C               	retlw	124
  1023     0343  3414               	retlw	20
  1024     0344  3424               	retlw	36
  1025     0345  3424               	retlw	36
  1026     0346  3418               	retlw	24
  1027     0347  3418               	retlw	24
  1028     0348  3424               	retlw	36
  1029     0349  3414               	retlw	20
  1030     034A  347C               	retlw	124
  1031     034B  3440               	retlw	64
  1032     034C  3400               	retlw	0
  1033     034D  347C               	retlw	124
  1034     034E  3408               	retlw	8
  1035     034F  3404               	retlw	4
  1036     0350  3404               	retlw	4
  1037     0351  3448               	retlw	72
  1038     0352  3454               	retlw	84
  1039     0353  3454               	retlw	84
  1040     0354  3454               	retlw	84
  1041     0355  3420               	retlw	32
  1042     0356  3404               	retlw	4
  1043     0357  343E               	retlw	62
  1044     0358  3444               	retlw	68
  1045     0359  3420               	retlw	32
  1046     035A  3400               	retlw	0
  1047     035B  343C               	retlw	60
  1048     035C  3440               	retlw	64
  1049     035D  3440               	retlw	64
  1050     035E  3420               	retlw	32
  1051     035F  347C               	retlw	124
  1052     0360  341C               	retlw	28
  1053     0361  3420               	retlw	32
  1054     0362  3440               	retlw	64
  1055     0363  3420               	retlw	32
  1056     0364  341C               	retlw	28
  1057     0365  343C               	retlw	60
  1058     0366  3440               	retlw	64
  1059     0367  3430               	retlw	48
  1060     0368  3440               	retlw	64
  1061     0369  343C               	retlw	60
  1062     036A  3444               	retlw	68
  1063     036B  3428               	retlw	40
  1064     036C  3410               	retlw	16
  1065     036D  3428               	retlw	40
  1066     036E  3444               	retlw	68
  1067     036F  3404               	retlw	4
  1068     0370  3448               	retlw	72
  1069     0371  3430               	retlw	48
  1070     0372  3408               	retlw	8
  1071     0373  3404               	retlw	4
  1072     0374  3444               	retlw	68
  1073     0375  3464               	retlw	100
  1074     0376  3454               	retlw	84
  1075     0377  344C               	retlw	76
  1076     0378  3444               	retlw	68
  1077     0379  3400               	retlw	0
  1078     037A  3408               	retlw	8
  1079     037B  3436               	retlw	54
  1080     037C  3441               	retlw	65
  1081     037D  3400               	retlw	0
  1082     037E  3400               	retlw	0
  1083     037F  3400               	retlw	0
  1084     0380  3477               	retlw	119
  1085     0381  3400               	retlw	0
  1086     0382  3400               	retlw	0
  1087     0383  3400               	retlw	0
  1088     0384  3441               	retlw	65
  1089     0385  3436               	retlw	54
  1090     0386  3408               	retlw	8
  1091     0387  3400               	retlw	0
  1092     0388  3408               	retlw	8
  1093     0389  3404               	retlw	4
  1094     038A  3408               	retlw	8
  1095     038B  3410               	retlw	16
  1096     038C  3408               	retlw	8
  1097     038D  342A               	retlw	42
  1098     038E  3455               	retlw	85
  1099     038F  342A               	retlw	42
  1100     0390  3455               	retlw	85
  1101     0391  342A               	retlw	42
  1102     0392                     __end_of_ascii:
  1103     0392                     _adcBounds:
  1104     0392  3400               	retlw	0
  1105     0393  3400               	retlw	0
  1106     0394  3419               	retlw	25
  1107     0395  3400               	retlw	0
  1108     0396  3432               	retlw	50
  1109     0397  3400               	retlw	0
  1110     0398  344B               	retlw	75
  1111     0399  3400               	retlw	0
  1112     039A  3464               	retlw	100
  1113     039B  3400               	retlw	0
  1114     039C  347D               	retlw	125
  1115     039D  3400               	retlw	0
  1116     039E  3496               	retlw	150
  1117     039F  3400               	retlw	0
  1118     03A0  34AF               	retlw	175
  1119     03A1  3400               	retlw	0
  1120     03A2  34C8               	retlw	200
  1121     03A3  3400               	retlw	0
  1122     03A4  34E1               	retlw	225
  1123     03A5  3400               	retlw	0
  1124     03A6  34FA               	retlw	250
  1125     03A7  3400               	retlw	0
  1126     03A8  3413               	retlw	19
  1127     03A9  3401               	retlw	1
  1128     03AA  342C               	retlw	44
  1129     03AB  3401               	retlw	1
  1130     03AC  3445               	retlw	69
  1131     03AD  3401               	retlw	1
  1132     03AE  345E               	retlw	94
  1133     03AF  3401               	retlw	1
  1134     03B0  3477               	retlw	119
  1135     03B1  3401               	retlw	1
  1136     03B2  3490               	retlw	144
  1137     03B3  3401               	retlw	1
  1138     03B4  34A9               	retlw	169
  1139     03B5  3401               	retlw	1
  1140     03B6  34C2               	retlw	194
  1141     03B7  3401               	retlw	1
  1142     03B8  34DB               	retlw	219
  1143     03B9  3401               	retlw	1
  1144     03BA  34F4               	retlw	244
  1145     03BB  3401               	retlw	1
  1146     03BC  340D               	retlw	13
  1147     03BD  3402               	retlw	2
  1148     03BE  3426               	retlw	38
  1149     03BF  3402               	retlw	2
  1150     03C0  343F               	retlw	63
  1151     03C1  3402               	retlw	2
  1152     03C2  3458               	retlw	88
  1153     03C3  3402               	retlw	2
  1154     03C4  3471               	retlw	113
  1155     03C5  3402               	retlw	2
  1156     03C6  348A               	retlw	138
  1157     03C7  3402               	retlw	2
  1158     03C8  34A3               	retlw	163
  1159     03C9  3402               	retlw	2
  1160     03CA  34BC               	retlw	188
  1161     03CB  3402               	retlw	2
  1162     03CC  34D5               	retlw	213
  1163     03CD  3402               	retlw	2
  1164     03CE  34EE               	retlw	238
  1165     03CF  3402               	retlw	2
  1166     03D0  3407               	retlw	7
  1167     03D1  3403               	retlw	3
  1168     03D2  3420               	retlw	32
  1169     03D3  3403               	retlw	3
  1170     03D4  3439               	retlw	57
  1171     03D5  3403               	retlw	3
  1172     03D6  3452               	retlw	82
  1173     03D7  3403               	retlw	3
  1174     03D8  346B               	retlw	107
  1175     03D9  3403               	retlw	3
  1176     03DA  3484               	retlw	132
  1177     03DB  3403               	retlw	3
  1178     03DC  349D               	retlw	157
  1179     03DD  3403               	retlw	3
  1180     03DE  34B6               	retlw	182
  1181     03DF  3403               	retlw	3
  1182     03E0  34CF               	retlw	207
  1183     03E1  3403               	retlw	3
  1184     03E2  34E8               	retlw	232
  1185     03E3  3403               	retlw	3
  1186     03E4  3401               	retlw	1
  1187     03E5  3404               	retlw	4
  1188     03E6                     __end_of_adcBounds:
  1189     0013                     _SSPBUF	set	19
  1190     0014                     _SSPCONbits	set	20
  1191     0008                     _PORTDbits	set	8
  1192     0007                     _PORTCbits	set	7
  1193     001E                     _ADRESH	set	30
  1194     0006                     _PORTBbits	set	6
  1195     001F                     _ADCON0bits	set	31
  1196     000C                     _PIR1bits	set	12
  1197     000B                     _INTCONbits	set	11
  1198     0009                     _PORTE	set	9
  1199     0008                     _PORTD	set	8
  1200     0007                     _PORTC	set	7
  1201     0006                     _PORTB	set	6
  1202     0005                     _PORTA	set	5
  1203     00F9                     _GO	set	249
  1204     0094                     _SSPSTATbits	set	148
  1205     0087                     _TRISCbits	set	135
  1206     009E                     _ADRESL	set	158
  1207     009F                     _ADCON1bits	set	159
  1208     0096                     _IOCBbits	set	150
  1209     008C                     _PIE1bits	set	140
  1210     0086                     _TRISBbits	set	134
  1211     0089                     _TRISEbits	set	137
  1212     0089                     _TRISE	set	137
  1213     0088                     _TRISD	set	136
  1214     0087                     _TRISC	set	135
  1215     0086                     _TRISB	set	134
  1216     0085                     _TRISA	set	133
  1217     008F                     _OSCCONbits	set	143
  1218     0188                     _ANSELbits	set	392
  1219     0189                     _ANSELH	set	393
  1220     0188                     _ANSEL	set	392
  1221                           
  1222                           	psect	cinit
  1223     0013                     start_initialization:	
  1224                           ; #config settings
  1225                           
  1226     0013                     __initialization:
  1227                           
  1228                           ; Initialize objects allocated to BANK1
  1229     0013  1383               	bcf	3,7	;select IRP bank0
  1230     0014  30D0               	movlw	low (__pdataBANK1+8)
  1231     0015  00FD               	movwf	btemp+-1
  1232     0016  3007               	movlw	high __pidataBANK1
  1233     0017  00FE               	movwf	btemp
  1234     0018  30F7               	movlw	low __pidataBANK1
  1235     0019  00FF               	movwf	btemp+1
  1236     001A  30C8               	movlw	low __pdataBANK1
  1237     001B  0084               	movwf	4
  1238     001C  120A  158A  2706  120A  118A  	fcall	init_ram0
  1239                           
  1240                           ; Initialize objects allocated to BANK0
  1241     0021  3068               	movlw	low (__pdataBANK0+13)
  1242     0022  00FD               	movwf	btemp+-1
  1243     0023  300E               	movlw	high __pidataBANK0
  1244     0024  00FE               	movwf	btemp
  1245     0025  30E6               	movlw	low __pidataBANK0
  1246     0026  00FF               	movwf	btemp+1
  1247     0027  305B               	movlw	low __pdataBANK0
  1248     0028  0084               	movwf	4
  1249     0029  120A  158A  2706  120A  118A  	fcall	init_ram0
  1250                           
  1251                           ; Initialize objects allocated to COMMON
  1252     002E  120A  158A  26BE  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
  1253     0033  00FB               	movwf	__pdataCOMMON& (0+127)
  1254     0034  120A  158A  26BF  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
  1255     0039  00FC               	movwf	(__pdataCOMMON+1)& (0+127)
  1256                           
  1257                           ; Clear objects allocated to BANK3
  1258     003A  1783               	bsf	3,7	;select IRP bank2
  1259     003B  3090               	movlw	low __pbssBANK3
  1260     003C  0084               	movwf	4
  1261     003D  30B8               	movlw	low (__pbssBANK3+40)
  1262     003E  120A  158A  26C6  120A  118A  	fcall	clear_ram0
  1263                           
  1264                           ; Clear objects allocated to BANK1
  1265     0043  1383               	bcf	3,7	;select IRP bank0
  1266     0044  30A0               	movlw	low __pbssBANK1
  1267     0045  0084               	movwf	4
  1268     0046  30C8               	movlw	low (__pbssBANK1+40)
  1269     0047  120A  158A  26C6  120A  118A  	fcall	clear_ram0
  1270                           
  1271                           ; Clear objects allocated to BANK0
  1272     004C  01E8               	clrf	__pbssBANK0& (0+127)
  1273     004D  01E9               	clrf	(__pbssBANK0+1)& (0+127)
  1274                           
  1275                           ; Clear objects allocated to COMMON
  1276     004E  01FD               	clrf	__pbssCOMMON& (0+127)
  1277     004F                     end_of_initialization:	
  1278                           ;End of C runtime variable initialization code
  1279                           
  1280     004F                     __end_of__initialization:
  1281     004F  0183               	clrf	3
  1282     0050  120A  118A  2F13   	ljmp	_main	;jump to C main() function
  1283                           
  1284                           	psect	bssCOMMON
  1285     007D                     __pbssCOMMON:
  1286     007D                     rotaryHandeling@oldstate:
  1287     007D                     	ds	1
  1288                           
  1289                           	psect	dataCOMMON
  1290     007B                     __pdataCOMMON:
  1291     007B                     _miniCount:
  1292     007B                     	ds	2
  1293                           
  1294                           	psect	bssBANK0
  1295     0068                     __pbssBANK0:
  1296     0068                     _volume:
  1297     0068                     	ds	2
  1298                           
  1299                           	psect	dataBANK0
  1300     005B                     __pdataBANK0:
  1301     005B                     main@F1490:
  1302     005B                     	ds	8
  1303     0063                     _switchLeds:
  1304     0063                     	ds	2
  1305     0065                     _count:
  1306     0065                     	ds	2
  1307     0067                     _nummerOffset:
  1308     0067                     	ds	1
  1309                           
  1310                           	psect	bssBANK1
  1311     00A0                     __pbssBANK1:
  1312     00A0                     _scherm1_buffer:
  1313     00A0                     	ds	40
  1314                           
  1315                           	psect	dataBANK1
  1316     00C8                     __pdataBANK1:
  1317     00C8                     main@F1492:
  1318     00C8                     	ds	8
  1319                           
  1320                           	psect	bssBANK3
  1321     0190                     __pbssBANK3:
  1322     0190                     _scherm2_buffer:
  1323     0190                     	ds	40
  1324                           
  1325                           	psect	inittext
  1326     0F02                     init_fetch0:	
  1327                           ;	Called with low address in FSR and high address in W
  1328                           
  1329     0F02  087E               	movf	btemp,w
  1330     0F03  008A               	movwf	10
  1331     0F04  087F               	movf	btemp+1,w
  1332     0F05  0082               	movwf	2
  1333     0F06                     init_ram0:	
  1334                           ;Called with:
  1335                           ;	high address of idata address in btemp 
  1336                           ;	low address of idata address in btemp+1 
  1337                           ;	low address of data in FSR
  1338                           ;	high address + 1 of data in btemp-1
  1339                           
  1340     0F06  120A  158A  2702  120A  158A  	fcall	init_fetch0
  1341     0F0B  0080               	movwf	0
  1342     0F0C  0A84               	incf	4,f
  1343     0F0D  0804               	movf	4,w
  1344     0F0E  067D               	xorwf	btemp+-1,w
  1345     0F0F  1903               	btfsc	3,2
  1346     0F10  3400               	retlw	0
  1347     0F11  0AFF               	incf	btemp+1,f
  1348     0F12  1903               	btfsc	3,2
  1349     0F13  0AFE               	incf	btemp,f
  1350     0F14  2F06               	goto	init_ram0
  1351                           
  1352                           	psect	clrtext
  1353     0EC6                     clear_ram0:	
  1354                           ;	Called with FSR containing the base address, and
  1355                           ;	W with the last address+1
  1356                           
  1357     0EC6  0064               	clrwdt	;clear the watchdog before getting into this loop
  1358     0EC7                     clrloop0:
  1359     0EC7  0180               	clrf	0	;clear RAM location pointed to by FSR
  1360     0EC8  0A84               	incf	4,f	;increment pointer
  1361     0EC9  0604               	xorwf	4,w	;XOR with final address
  1362     0ECA  1903               	btfsc	3,2	;have we reached the end yet?
  1363     0ECB  3400               	retlw	0	;all done for this memory range, return
  1364     0ECC  0604               	xorwf	4,w	;XOR again to restore value
  1365     0ECD  2EC7               	goto	clrloop0	;do the next byte
  1366                           
  1367                           	psect	cstackCOMMON
  1368     0070                     __pcstackCOMMON:
  1369     0070                     ?_pic_init:
  1370     0070                     ?_scherm_init:	
  1371                           ; 1 bytes @ 0x0
  1372                           
  1373     0070                     ?_send_buffer:	
  1374                           ; 1 bytes @ 0x0
  1375                           
  1376     0070                     ?_input_conversion:	
  1377                           ; 1 bytes @ 0x0
  1378                           
  1379     0070                     ?_volume_conversion:	
  1380                           ; 1 bytes @ 0x0
  1381                           
  1382     0070                     ?_init_osc:	
  1383                           ; 1 bytes @ 0x0
  1384                           
  1385     0070                     ?_ports_init:	
  1386                           ; 1 bytes @ 0x0
  1387                           
  1388     0070                     ?_pins_init:	
  1389                           ; 1 bytes @ 0x0
  1390                           
  1391     0070                     ?_adc_init:	
  1392                           ; 1 bytes @ 0x0
  1393                           
  1394     0070                     ?_interrupt_init:	
  1395                           ; 1 bytes @ 0x0
  1396                           
  1397     0070                     ?_spi_transmit:	
  1398                           ; 1 bytes @ 0x0
  1399                           
  1400     0070                     ?_rotaryHandeling:	
  1401                           ; 1 bytes @ 0x0
  1402                           
  1403     0070                     ??_rotaryHandeling:	
  1404                           ; 1 bytes @ 0x0
  1405                           
  1406     0070                     ?_ISR:	
  1407                           ; 1 bytes @ 0x0
  1408                           
  1409                           
  1410                           ; 1 bytes @ 0x0
  1411     0070                     	ds	3
  1412     0073                     rotaryHandeling@state:
  1413                           
  1414                           ; 1 bytes @ 0x3
  1415     0073                     	ds	1
  1416     0074                     ??_ISR:
  1417                           
  1418                           ; 1 bytes @ 0x4
  1419     0074                     	ds	7
  1420                           
  1421                           	psect	cstackBANK0
  1422     0020                     __pcstackBANK0:
  1423     0020                     ISR@upperValue:
  1424                           
  1425                           ; 2 bytes @ 0x0
  1426     0020                     	ds	2
  1427     0022                     ISR@lowerValue:
  1428                           
  1429                           ; 2 bytes @ 0x2
  1430     0022                     	ds	2
  1431     0024                     ISR@adcValue:
  1432                           
  1433                           ; 2 bytes @ 0x4
  1434     0024                     	ds	2
  1435     0026                     ??_init_osc:
  1436     0026                     ??_ports_init:	
  1437                           ; 1 bytes @ 0x6
  1438                           
  1439     0026                     ??_pins_init:	
  1440                           ; 1 bytes @ 0x6
  1441                           
  1442     0026                     ??_adc_init:	
  1443                           ; 1 bytes @ 0x6
  1444                           
  1445     0026                     ?_spi_init:	
  1446                           ; 1 bytes @ 0x6
  1447                           
  1448     0026                     ??_interrupt_init:	
  1449                           ; 1 bytes @ 0x6
  1450                           
  1451     0026                     ??_spi_transmit:	
  1452                           ; 1 bytes @ 0x6
  1453                           
  1454     0026                     ?___bmul:	
  1455                           ; 1 bytes @ 0x6
  1456                           
  1457     0026                     ?___wmul:	
  1458                           ; 1 bytes @ 0x6
  1459                           
  1460     0026                     spi_init@sdi_rx_smp:	
  1461                           ; 2 bytes @ 0x6
  1462                           
  1463     0026                     spi_transmit@c:	
  1464                           ; 1 bytes @ 0x6
  1465                           
  1466     0026                     ___bmul@multiplicand:	
  1467                           ; 1 bytes @ 0x6
  1468                           
  1469     0026                     ___wmul@multiplier:	
  1470                           ; 1 bytes @ 0x6
  1471                           
  1472                           
  1473                           ; 2 bytes @ 0x6
  1474     0026                     	ds	1
  1475     0027                     ??_scherm_init:
  1476     0027                     ??_send_buffer:	
  1477                           ; 1 bytes @ 0x7
  1478                           
  1479     0027                     ??___bmul:	
  1480                           ; 1 bytes @ 0x7
  1481                           
  1482     0027                     spi_init@clock_pol:	
  1483                           ; 1 bytes @ 0x7
  1484                           
  1485     0027                     ___bmul@product:	
  1486                           ; 1 bytes @ 0x7
  1487                           
  1488                           
  1489                           ; 1 bytes @ 0x7
  1490     0027                     	ds	1
  1491     0028                     send_buffer@scherm:
  1492     0028                     spi_init@sdo_tx_edge:	
  1493                           ; 1 bytes @ 0x8
  1494                           
  1495     0028                     ___bmul@multiplier:	
  1496                           ; 1 bytes @ 0x8
  1497                           
  1498     0028                     scherm_init@i:	
  1499                           ; 1 bytes @ 0x8
  1500                           
  1501     0028                     ___wmul@multiplicand:	
  1502                           ; 2 bytes @ 0x8
  1503                           
  1504                           
  1505                           ; 2 bytes @ 0x8
  1506     0028                     	ds	1
  1507     0029                     ??_spi_init:
  1508     0029                     spi_init@mst_slv_oscdiv:	
  1509                           ; 1 bytes @ 0x9
  1510                           
  1511     0029                     send_buffer@i:	
  1512                           ; 1 bytes @ 0x9
  1513                           
  1514                           
  1515                           ; 2 bytes @ 0x9
  1516     0029                     	ds	1
  1517     002A                     ??_pic_init:
  1518     002A                     ??___wmul:	
  1519                           ; 1 bytes @ 0xA
  1520                           
  1521     002A                     scherm_init@helderheid:	
  1522                           ; 1 bytes @ 0xA
  1523                           
  1524     002A                     ___wmul@product:	
  1525                           ; 1 bytes @ 0xA
  1526                           
  1527                           
  1528                           ; 2 bytes @ 0xA
  1529     002A                     	ds	1
  1530     002B                     scherm_init@controlWord_1:
  1531     002B                     send_buffer@i_585:	
  1532                           ; 1 bytes @ 0xB
  1533                           
  1534                           
  1535                           ; 2 bytes @ 0xB
  1536     002B                     	ds	1
  1537     002C                     ?_load_buffer:
  1538     002C                     scherm_init@controlWord_0:	
  1539                           ; 1 bytes @ 0xC
  1540                           
  1541     002C                     load_buffer@position:	
  1542                           ; 1 bytes @ 0xC
  1543                           
  1544                           
  1545                           ; 2 bytes @ 0xC
  1546     002C                     	ds	2
  1547     002E                     load_buffer@scherm:
  1548                           
  1549                           ; 1 bytes @ 0xE
  1550     002E                     	ds	1
  1551     002F                     ??_load_buffer:
  1552                           
  1553                           ; 1 bytes @ 0xF
  1554     002F                     	ds	8
  1555     0037                     load_buffer@character:
  1556                           
  1557                           ; 1 bytes @ 0x17
  1558     0037                     	ds	1
  1559     0038                     load_buffer@i:
  1560                           
  1561                           ; 2 bytes @ 0x18
  1562     0038                     	ds	2
  1563     003A                     load_buffer@i_591:
  1564                           
  1565                           ; 2 bytes @ 0x1A
  1566     003A                     	ds	2
  1567     003C                     load_buffer@i_592:
  1568                           
  1569                           ; 2 bytes @ 0x1C
  1570     003C                     	ds	2
  1571     003E                     ?_text_to_buffer:
  1572     003E                     ??_input_conversion:	
  1573                           ; 1 bytes @ 0x1E
  1574                           
  1575     003E                     ??_volume_conversion:	
  1576                           ; 1 bytes @ 0x1E
  1577                           
  1578     003E                     input_conversion@input:	
  1579                           ; 1 bytes @ 0x1E
  1580                           
  1581     003E                     text_to_buffer@newtext:	
  1582                           ; 1 bytes @ 0x1E
  1583                           
  1584     003E                     volume_conversion@buffer:	
  1585                           ; 1 bytes @ 0x1E
  1586                           
  1587                           
  1588                           ; 2 bytes @ 0x1E
  1589     003E                     	ds	1
  1590     003F                     ??_text_to_buffer:
  1591                           
  1592                           ; 1 bytes @ 0x1F
  1593     003F                     	ds	1
  1594     0040                     text_to_buffer@scherm:
  1595     0040                     volume_conversion@i:	
  1596                           ; 1 bytes @ 0x20
  1597                           
  1598                           
  1599                           ; 2 bytes @ 0x20
  1600     0040                     	ds	1
  1601     0041                     text_to_buffer@i:
  1602                           
  1603                           ; 2 bytes @ 0x21
  1604     0041                     	ds	1
  1605     0042                     volume_conversion@value:
  1606                           
  1607                           ; 1 bytes @ 0x22
  1608     0042                     	ds	1
  1609     0043                     ?_main:
  1610     0043                     main@argc:	
  1611                           ; 2 bytes @ 0x23
  1612                           
  1613                           
  1614                           ; 2 bytes @ 0x23
  1615     0043                     	ds	2
  1616     0045                     main@argv:
  1617                           
  1618                           ; 2 bytes @ 0x25
  1619     0045                     	ds	2
  1620     0047                     ??_main:
  1621                           
  1622                           ; 1 bytes @ 0x27
  1623     0047                     	ds	4
  1624     004B                     main@screen2:
  1625                           
  1626                           ; 8 bytes @ 0x2B
  1627     004B                     	ds	8
  1628     0053                     main@screen1:
  1629                           
  1630                           ; 8 bytes @ 0x33
  1631     0053                     	ds	8
  1632                           
  1633                           	psect	maintext
  1634     0713                     __pmaintext:	
  1635 ;;
  1636 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1637 ;;
  1638 ;; *************** function _main *****************
  1639 ;; Defined at:
  1640 ;;		line 69 in file "main.c"
  1641 ;; Parameters:    Size  Location     Type
  1642 ;;  argc            2   35[BANK0 ] int 
  1643 ;;  argv            2   37[BANK0 ] PTR PTR unsigned char 
  1644 ;; Auto vars:     Size  Location     Type
  1645 ;;  screen1         8   51[BANK0 ] unsigned char [8]
  1646 ;;  screen2         8   43[BANK0 ] unsigned char [8]
  1647 ;;  helderheid      1    0        unsigned char 
  1648 ;; Return value:  Size  Location     Type
  1649 ;;                  2   35[BANK0 ] int 
  1650 ;; Registers used:
  1651 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1652 ;; Tracked objects:
  1653 ;;		On entry : B00/0
  1654 ;;		On exit  : 0/0
  1655 ;;		Unchanged: 0/0
  1656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1657 ;;      Params:         0       4       0       0       0
  1658 ;;      Locals:         0      16       0       0       0
  1659 ;;      Temps:          0       4       0       0       0
  1660 ;;      Totals:         0      24       0       0       0
  1661 ;;Total ram usage:       24 bytes
  1662 ;; Hardware stack levels required when called: 5
  1663 ;; This function calls:
  1664 ;;		_input_conversion
  1665 ;;		_pic_init
  1666 ;;		_scherm_init
  1667 ;;		_send_buffer
  1668 ;;		_text_to_buffer
  1669 ;;		_volume_conversion
  1670 ;; This function is called by:
  1671 ;;		Startup code after reset
  1672 ;; This function uses a non-reentrant model
  1673 ;;
  1674                           
  1675     0713                     _main:	
  1676                           ;psect for function _main
  1677                           
  1678     0713                     l1611:	
  1679                           ;incstack = 0
  1680                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1681                           
  1682                           
  1683                           ;main.c: 70:     pic_init();
  1684     0713  120A  158A  277E  120A  118A  	fcall	_pic_init
  1685     0718                     l1613:
  1686     0718                     l1615:
  1687                           
  1688                           ;main.c: 72:     scherm_init(helderheid);
  1689     0718  300F               	movlw	15
  1690     0719  120A  118A  2685  120A  118A  	fcall	_scherm_init
  1691     071E                     l1617:
  1692                           
  1693                           ;main.c: 73:     char screen2[8] = "INPUT:0 ";
  1694     071E  304B               	movlw	main@screen2& (0+255)
  1695     071F  0084               	movwf	4
  1696     0720  305B               	movlw	low main@F1490
  1697     0721  1283               	bcf	3,5	;RP0=0, select bank0
  1698     0722  1303               	bcf	3,6	;RP1=0, select bank0
  1699     0723  00C7               	movwf	??_main
  1700     0724  0804               	movf	4,w
  1701     0725  00C8               	movwf	??_main+1
  1702     0726  3008               	movlw	8
  1703     0727  00C9               	movwf	??_main+2
  1704     0728                     u880:
  1705     0728  0847               	movf	??_main,w
  1706     0729  0084               	movwf	4
  1707     072A  1383               	bcf	3,7	;select IRP bank0
  1708     072B  0800               	movf	0,w
  1709     072C  00CA               	movwf	??_main+3
  1710     072D  0AC7               	incf	??_main,f
  1711     072E  0848               	movf	??_main+1,w
  1712     072F  0084               	movwf	4
  1713     0730  084A               	movf	??_main+3,w
  1714     0731  0080               	movwf	0
  1715     0732  0AC8               	incf	??_main+1,f
  1716     0733  0BC9               	decfsz	??_main+2,f
  1717     0734  2F28               	goto	u880
  1718     0735                     l1619:
  1719                           
  1720                           ;main.c: 74:     text_to_buffer(SCREEN_2,screen2);
  1721     0735  304B               	movlw	(low (main@screen2| 0))& (0+255)
  1722     0736  00BE               	movwf	text_to_buffer@newtext
  1723     0737  3002               	movlw	2
  1724     0738  120A  118A  20BF  120A  118A  	fcall	_text_to_buffer
  1725     073D                     l1621:
  1726                           
  1727                           ;main.c: 75:     char screen1[8] = "VOL:0   ";
  1728     073D  3053               	movlw	main@screen1& (0+255)
  1729     073E  0084               	movwf	4
  1730     073F  30C8               	movlw	low main@F1492
  1731     0740  1283               	bcf	3,5	;RP0=0, select bank0
  1732     0741  1303               	bcf	3,6	;RP1=0, select bank0
  1733     0742  00C7               	movwf	??_main
  1734     0743  0804               	movf	4,w
  1735     0744  00C8               	movwf	??_main+1
  1736     0745  3008               	movlw	8
  1737     0746  00C9               	movwf	??_main+2
  1738     0747                     u890:
  1739     0747  0847               	movf	??_main,w
  1740     0748  0084               	movwf	4
  1741     0749  1383               	bcf	3,7	;select IRP bank1
  1742     074A  0800               	movf	0,w
  1743     074B  00CA               	movwf	??_main+3
  1744     074C  0AC7               	incf	??_main,f
  1745     074D  0848               	movf	??_main+1,w
  1746     074E  0084               	movwf	4
  1747     074F  084A               	movf	??_main+3,w
  1748     0750  0080               	movwf	0
  1749     0751  0AC8               	incf	??_main+1,f
  1750     0752  0BC9               	decfsz	??_main+2,f
  1751     0753  2F47               	goto	u890
  1752     0754                     l1623:
  1753                           
  1754                           ;main.c: 76:     text_to_buffer(SCREEN_1,screen1);
  1755     0754  3053               	movlw	(low (main@screen1| 0))& (0+255)
  1756     0755  00BE               	movwf	text_to_buffer@newtext
  1757     0756  3001               	movlw	1
  1758     0757  120A  118A  20BF  120A  118A  	fcall	_text_to_buffer
  1759     075C                     l1625:
  1760                           
  1761                           ;main.c: 78:         if(switchLeds == 1){
  1762     075C  1283               	bcf	3,5	;RP0=0, select bank0
  1763     075D  1303               	bcf	3,6	;RP1=0, select bank0
  1764     075E  0363               	decf	_switchLeds,w
  1765     075F  0464               	iorwf	_switchLeds+1,w
  1766     0760  1D03               	btfss	3,2
  1767     0761  2F63               	goto	u901
  1768     0762  2F64               	goto	u900
  1769     0763                     u901:
  1770     0763  2F73               	goto	l1631
  1771     0764                     u900:
  1772     0764                     l1627:
  1773                           
  1774                           ;main.c: 79:             send_buffer(SCREEN_2);
  1775     0764  3002               	movlw	2
  1776     0765  120A  118A  2053  120A  118A  	fcall	_send_buffer
  1777                           
  1778                           ;main.c: 80:             input_conversion();
  1779     076A  120A  118A  20EE  120A  118A  	fcall	_input_conversion
  1780     076F                     l1629:
  1781                           
  1782                           ;main.c: 81:             switchLeds = 0;
  1783     076F  1283               	bcf	3,5	;RP0=0, select bank0
  1784     0770  1303               	bcf	3,6	;RP1=0, select bank0
  1785     0771  01E3               	clrf	_switchLeds
  1786     0772  01E4               	clrf	_switchLeds+1
  1787     0773                     l1631:
  1788                           
  1789                           ;main.c: 83:         send_buffer(SCREEN_1);
  1790     0773  3001               	movlw	1
  1791     0774  120A  118A  2053  120A  118A  	fcall	_send_buffer
  1792     0779                     l1633:
  1793                           
  1794                           ;main.c: 84:         volume_conversion();
  1795     0779  120A  118A  253A  120A  118A  	fcall	_volume_conversion
  1796     077E                     l1635:
  1797                           
  1798                           ;main.c: 85:         GO = 1;
  1799     077E  1283               	bcf	3,5	;RP0=0, select bank0
  1800     077F  1303               	bcf	3,6	;RP1=0, select bank0
  1801     0780  149F               	bsf	31,1	;volatile
  1802     0781  2F5C               	goto	l1625
  1803     0782  120A  118A  2810   	ljmp	start
  1804     0785                     __end_of_main:
  1805                           
  1806                           	psect	text1
  1807     053A                     __ptext1:	
  1808 ;; *************** function _volume_conversion *****************
  1809 ;; Defined at:
  1810 ;;		line 151 in file "main.c"
  1811 ;; Parameters:    Size  Location     Type
  1812 ;;		None
  1813 ;; Auto vars:     Size  Location     Type
  1814 ;;  i               2   32[BANK0 ] int 
  1815 ;;  buffer          2   30[BANK0 ] unsigned char [2]
  1816 ;;  value           1   34[BANK0 ] unsigned char 
  1817 ;; Return value:  Size  Location     Type
  1818 ;;                  1    wreg      void 
  1819 ;; Registers used:
  1820 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1821 ;; Tracked objects:
  1822 ;;		On entry : 0/0
  1823 ;;		On exit  : 0/0
  1824 ;;		Unchanged: 0/0
  1825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1826 ;;      Params:         0       0       0       0       0
  1827 ;;      Locals:         0       5       0       0       0
  1828 ;;      Temps:          0       0       0       0       0
  1829 ;;      Totals:         0       5       0       0       0
  1830 ;;Total ram usage:        5 bytes
  1831 ;; Hardware stack levels used: 1
  1832 ;; Hardware stack levels required when called: 4
  1833 ;; This function calls:
  1834 ;;		_load_buffer
  1835 ;; This function is called by:
  1836 ;;		_main
  1837 ;; This function uses a non-reentrant model
  1838 ;;
  1839                           
  1840     053A                     _volume_conversion:	
  1841                           ;psect for function _volume_conversion
  1842                           
  1843     053A                     l1515:	
  1844                           ;incstack = 0
  1845                           ; Regs used in _volume_conversion: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1846                           
  1847                           
  1848                           ;main.c: 153:     char buffer[2];;main.c: 154:     char value;;main.c: 155:     if(volum
      +                          e < 10){
  1849     053A  1283               	bcf	3,5	;RP0=0, select bank0
  1850     053B  1303               	bcf	3,6	;RP1=0, select bank0
  1851     053C  0869               	movf	_volume+1,w
  1852     053D  3A80               	xorlw	128
  1853     053E  00FF               	movwf	btemp+1
  1854     053F  3080               	movlw	128
  1855     0540  027F               	subwf	btemp+1,w
  1856     0541  1D03               	skipz
  1857     0542  2D45               	goto	u745
  1858     0543  300A               	movlw	10
  1859     0544  0268               	subwf	_volume,w
  1860     0545                     u745:
  1861     0545  1803               	skipnc
  1862     0546  2D48               	goto	u741
  1863     0547  2D49               	goto	u740
  1864     0548                     u741:
  1865     0548  2D52               	goto	l1525
  1866     0549                     u740:
  1867     0549                     l1517:
  1868                           
  1869                           ;main.c: 156:         value = (char)volume + nummerOffset;
  1870     0549  1283               	bcf	3,5	;RP0=0, select bank0
  1871     054A  1303               	bcf	3,6	;RP1=0, select bank0
  1872     054B  0868               	movf	_volume,w
  1873     054C  3E30               	addlw	48
  1874     054D  00C2               	movwf	volume_conversion@value
  1875     054E                     l1519:
  1876                           
  1877                           ;main.c: 157:         buffer[0] = value;
  1878     054E  0842               	movf	volume_conversion@value,w
  1879     054F  00BE               	movwf	volume_conversion@buffer
  1880     0550                     l1521:
  1881     0550                     l1523:
  1882                           
  1883                           ;main.c: 159:         buffer[1] = value;
  1884     0550  01BF               	clrf	volume_conversion@buffer+1
  1885                           
  1886                           ;main.c: 160:     }
  1887     0551  2DA1               	goto	l1555
  1888     0552                     l1525:
  1889     0552  1283               	bcf	3,5	;RP0=0, select bank0
  1890     0553  1303               	bcf	3,6	;RP1=0, select bank0
  1891     0554  0869               	movf	_volume+1,w
  1892     0555  3A80               	xorlw	128
  1893     0556  00FF               	movwf	btemp+1
  1894     0557  3080               	movlw	128
  1895     0558  027F               	subwf	btemp+1,w
  1896     0559  1D03               	skipz
  1897     055A  2D5D               	goto	u755
  1898     055B  3014               	movlw	20
  1899     055C  0268               	subwf	_volume,w
  1900     055D                     u755:
  1901     055D  1803               	skipnc
  1902     055E  2D60               	goto	u751
  1903     055F  2D61               	goto	u750
  1904     0560                     u751:
  1905     0560  2D6B               	goto	l1533
  1906     0561                     u750:
  1907     0561                     l1527:
  1908                           
  1909                           ;main.c: 163:         buffer[0] = value;
  1910     0561  3031               	movlw	49
  1911     0562  1283               	bcf	3,5	;RP0=0, select bank0
  1912     0563  1303               	bcf	3,6	;RP1=0, select bank0
  1913     0564  00BE               	movwf	volume_conversion@buffer
  1914     0565                     l1529:
  1915                           
  1916                           ;main.c: 164:         value = (char)volume - 10 + nummerOffset;
  1917     0565  0868               	movf	_volume,w
  1918     0566  3E26               	addlw	38
  1919     0567  00C2               	movwf	volume_conversion@value
  1920     0568                     l1531:
  1921                           
  1922                           ;main.c: 165:         buffer[1] = value;
  1923     0568  0842               	movf	volume_conversion@value,w
  1924     0569  00BF               	movwf	volume_conversion@buffer+1
  1925                           
  1926                           ;main.c: 166:     }
  1927     056A  2DA1               	goto	l1555
  1928     056B                     l1533:
  1929     056B  1283               	bcf	3,5	;RP0=0, select bank0
  1930     056C  1303               	bcf	3,6	;RP1=0, select bank0
  1931     056D  0869               	movf	_volume+1,w
  1932     056E  3A80               	xorlw	128
  1933     056F  00FF               	movwf	btemp+1
  1934     0570  3080               	movlw	128
  1935     0571  027F               	subwf	btemp+1,w
  1936     0572  1D03               	skipz
  1937     0573  2D76               	goto	u765
  1938     0574  301E               	movlw	30
  1939     0575  0268               	subwf	_volume,w
  1940     0576                     u765:
  1941     0576  1803               	skipnc
  1942     0577  2D79               	goto	u761
  1943     0578  2D7A               	goto	u760
  1944     0579                     u761:
  1945     0579  2D82               	goto	l1541
  1946     057A                     u760:
  1947     057A                     l1535:
  1948                           
  1949                           ;main.c: 169:         buffer[0] = value;
  1950     057A  3032               	movlw	50
  1951     057B  1283               	bcf	3,5	;RP0=0, select bank0
  1952     057C  1303               	bcf	3,6	;RP1=0, select bank0
  1953     057D  00BE               	movwf	volume_conversion@buffer
  1954     057E                     l1537:
  1955                           
  1956                           ;main.c: 170:         value = (char)volume - 20 + nummerOffset;
  1957     057E  0868               	movf	_volume,w
  1958     057F  3E1C               	addlw	28
  1959     0580  00C2               	movwf	volume_conversion@value
  1960     0581  2D68               	goto	l1531
  1961     0582                     l1541:
  1962     0582  1283               	bcf	3,5	;RP0=0, select bank0
  1963     0583  1303               	bcf	3,6	;RP1=0, select bank0
  1964     0584  0869               	movf	_volume+1,w
  1965     0585  3A80               	xorlw	128
  1966     0586  00FF               	movwf	btemp+1
  1967     0587  3080               	movlw	128
  1968     0588  027F               	subwf	btemp+1,w
  1969     0589  1D03               	skipz
  1970     058A  2D8D               	goto	u775
  1971     058B  3028               	movlw	40
  1972     058C  0268               	subwf	_volume,w
  1973     058D                     u775:
  1974     058D  1803               	skipnc
  1975     058E  2D90               	goto	u771
  1976     058F  2D91               	goto	u770
  1977     0590                     u771:
  1978     0590  2D99               	goto	l1549
  1979     0591                     u770:
  1980     0591                     l1543:
  1981                           
  1982                           ;main.c: 175:         buffer[0] = value;
  1983     0591  3033               	movlw	51
  1984     0592  1283               	bcf	3,5	;RP0=0, select bank0
  1985     0593  1303               	bcf	3,6	;RP1=0, select bank0
  1986     0594  00BE               	movwf	volume_conversion@buffer
  1987     0595                     l1545:
  1988                           
  1989                           ;main.c: 176:         value = (char)volume - 30 + nummerOffset;
  1990     0595  0868               	movf	_volume,w
  1991     0596  3E12               	addlw	18
  1992     0597  00C2               	movwf	volume_conversion@value
  1993     0598  2D68               	goto	l1531
  1994     0599                     l1549:
  1995                           
  1996                           ;main.c: 181:         buffer[0] = value;
  1997     0599  3034               	movlw	52
  1998     059A  1283               	bcf	3,5	;RP0=0, select bank0
  1999     059B  1303               	bcf	3,6	;RP1=0, select bank0
  2000     059C  00BE               	movwf	volume_conversion@buffer
  2001     059D                     l1551:
  2002                           
  2003                           ;main.c: 182:         value = (char)volume - 40 + nummerOffset;
  2004     059D  0868               	movf	_volume,w
  2005     059E  3E08               	addlw	8
  2006     059F  00C2               	movwf	volume_conversion@value
  2007     05A0  2D68               	goto	l1531
  2008     05A1                     l1555:
  2009                           
  2010                           ;main.c: 186:     for(int i = 0; i < 2; i++){
  2011     05A1  01C0               	clrf	volume_conversion@i
  2012     05A2  01C1               	clrf	volume_conversion@i+1
  2013     05A3                     l1561:
  2014                           
  2015                           ;main.c: 187:         if(buffer[i] == '\0'){
  2016     05A3  1283               	bcf	3,5	;RP0=0, select bank0
  2017     05A4  1303               	bcf	3,6	;RP1=0, select bank0
  2018     05A5  0840               	movf	volume_conversion@i,w
  2019     05A6  3E3E               	addlw	(low (volume_conversion@buffer| 0))& (0+255)
  2020     05A7  0084               	movwf	4
  2021     05A8  1383               	bcf	3,7	;select IRP bank0
  2022     05A9  0800               	movf	0,w
  2023     05AA  1D03               	btfss	3,2
  2024     05AB  2DAD               	goto	u781
  2025     05AC  2DAE               	goto	u780
  2026     05AD                     u781:
  2027     05AD  2DC1               	goto	l1569
  2028     05AE                     u780:
  2029     05AE                     l1563:
  2030                           
  2031                           ;main.c: 188:             if(i == 1){
  2032     05AE  0340               	decf	volume_conversion@i,w
  2033     05AF  0441               	iorwf	volume_conversion@i+1,w
  2034     05B0  1D03               	btfss	3,2
  2035     05B1  2DB3               	goto	u791
  2036     05B2  2DB4               	goto	u790
  2037     05B3                     u791:
  2038     05B3  2DE9               	goto	l148
  2039     05B4                     u790:
  2040     05B4                     l1565:
  2041                           
  2042                           ;main.c: 189:                 load_buffer(' ',5,SCREEN_1);
  2043     05B4  3005               	movlw	5
  2044     05B5  00AC               	movwf	load_buffer@position
  2045     05B6  3000               	movlw	0
  2046     05B7  00AD               	movwf	load_buffer@position+1
  2047     05B8  01AE               	clrf	load_buffer@scherm
  2048     05B9  0AAE               	incf	load_buffer@scherm,f
  2049     05BA  3020               	movlw	32
  2050     05BB  120A  118A  23E6  120A  118A  	fcall	_load_buffer
  2051     05C0  2DE9               	goto	l148
  2052     05C1                     l1569:
  2053                           
  2054                           ;main.c: 194:             load_buffer(buffer[i],i+4, SCREEN_1);
  2055     05C1  0840               	movf	volume_conversion@i,w
  2056     05C2  3E04               	addlw	4
  2057     05C3  00AC               	movwf	load_buffer@position
  2058     05C4  0841               	movf	volume_conversion@i+1,w
  2059     05C5  1803               	skipnc
  2060     05C6  3E01               	addlw	1
  2061     05C7  3E00               	addlw	0
  2062     05C8  00AD               	movwf	load_buffer@position+1
  2063     05C9  01AE               	clrf	load_buffer@scherm
  2064     05CA  0AAE               	incf	load_buffer@scherm,f
  2065     05CB  0840               	movf	volume_conversion@i,w
  2066     05CC  3E3E               	addlw	(low (volume_conversion@buffer| 0))& (0+255)
  2067     05CD  0084               	movwf	4
  2068     05CE  0800               	movf	0,w
  2069     05CF  120A  118A  23E6  120A  118A  	fcall	_load_buffer
  2070     05D4                     l1571:
  2071                           
  2072                           ;main.c: 196:     }
  2073     05D4  3001               	movlw	1
  2074     05D5  1283               	bcf	3,5	;RP0=0, select bank0
  2075     05D6  1303               	bcf	3,6	;RP1=0, select bank0
  2076     05D7  07C0               	addwf	volume_conversion@i,f
  2077     05D8  1803               	skipnc
  2078     05D9  0AC1               	incf	volume_conversion@i+1,f
  2079     05DA  3000               	movlw	0
  2080     05DB  07C1               	addwf	volume_conversion@i+1,f
  2081     05DC                     l1573:
  2082     05DC  0841               	movf	volume_conversion@i+1,w
  2083     05DD  3A80               	xorlw	128
  2084     05DE  00FF               	movwf	btemp+1
  2085     05DF  3080               	movlw	128
  2086     05E0  027F               	subwf	btemp+1,w
  2087     05E1  1D03               	skipz
  2088     05E2  2DE5               	goto	u805
  2089     05E3  3002               	movlw	2
  2090     05E4  0240               	subwf	volume_conversion@i,w
  2091     05E5                     u805:
  2092     05E5  1C03               	skipc
  2093     05E6  2DE8               	goto	u801
  2094     05E7  2DE9               	goto	u800
  2095     05E8                     u801:
  2096     05E8  2DA3               	goto	l1561
  2097     05E9                     u800:
  2098     05E9                     l148:
  2099     05E9  0008               	return
  2100     05EA                     __end_of_volume_conversion:
  2101                           
  2102                           	psect	text2
  2103     00BF                     __ptext2:	
  2104 ;; *************** function _text_to_buffer *****************
  2105 ;; Defined at:
  2106 ;;		line 110 in file "scherm.c"
  2107 ;; Parameters:    Size  Location     Type
  2108 ;;  scherm          1    wreg     enum E1453
  2109 ;;  newtext         1   30[BANK0 ] PTR unsigned char 
  2110 ;;		 -> main@screen1(8), main@screen2(8), 
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;  scherm          1   32[BANK0 ] enum E1453
  2113 ;;  i               2   33[BANK0 ] int 
  2114 ;; Return value:  Size  Location     Type
  2115 ;;                  1    wreg      void 
  2116 ;; Registers used:
  2117 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2118 ;; Tracked objects:
  2119 ;;		On entry : 0/0
  2120 ;;		On exit  : 0/0
  2121 ;;		Unchanged: 0/0
  2122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2123 ;;      Params:         0       1       0       0       0
  2124 ;;      Locals:         0       3       0       0       0
  2125 ;;      Temps:          0       1       0       0       0
  2126 ;;      Totals:         0       5       0       0       0
  2127 ;;Total ram usage:        5 bytes
  2128 ;; Hardware stack levels used: 1
  2129 ;; Hardware stack levels required when called: 4
  2130 ;; This function calls:
  2131 ;;		_load_buffer
  2132 ;; This function is called by:
  2133 ;;		_main
  2134 ;; This function uses a non-reentrant model
  2135 ;;
  2136                           
  2137     00BF                     _text_to_buffer:	
  2138                           ;psect for function _text_to_buffer
  2139                           
  2140                           
  2141                           ;incstack = 0
  2142                           ; Regs used in _text_to_buffer: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2143                           ;text_to_buffer@scherm stored from wreg
  2144     00BF  1283               	bcf	3,5	;RP0=0, select bank0
  2145     00C0  1303               	bcf	3,6	;RP1=0, select bank0
  2146     00C1  00C0               	movwf	text_to_buffer@scherm
  2147     00C2                     l1459:
  2148                           
  2149                           ;scherm.c: 111:     for(int i = 0; i < 8; i++){
  2150     00C2  01C1               	clrf	text_to_buffer@i
  2151     00C3  01C2               	clrf	text_to_buffer@i+1
  2152     00C4                     l1465:
  2153                           
  2154                           ;scherm.c: 112:         load_buffer(newtext[i], i ,scherm);
  2155     00C4  1283               	bcf	3,5	;RP0=0, select bank0
  2156     00C5  1303               	bcf	3,6	;RP1=0, select bank0
  2157     00C6  0842               	movf	text_to_buffer@i+1,w
  2158     00C7  00AD               	movwf	load_buffer@position+1
  2159     00C8  0841               	movf	text_to_buffer@i,w
  2160     00C9  00AC               	movwf	load_buffer@position
  2161     00CA  0840               	movf	text_to_buffer@scherm,w
  2162     00CB  00AE               	movwf	load_buffer@scherm
  2163     00CC  0841               	movf	text_to_buffer@i,w
  2164     00CD  073E               	addwf	text_to_buffer@newtext,w
  2165     00CE  00BF               	movwf	??_text_to_buffer
  2166     00CF  083F               	movf	??_text_to_buffer,w
  2167     00D0  0084               	movwf	4
  2168     00D1  1383               	bcf	3,7	;select IRP bank0
  2169     00D2  0800               	movf	0,w
  2170     00D3  120A  118A  23E6  120A  118A  	fcall	_load_buffer
  2171     00D8                     l1467:
  2172                           
  2173                           ;scherm.c: 113:     }
  2174     00D8  3001               	movlw	1
  2175     00D9  1283               	bcf	3,5	;RP0=0, select bank0
  2176     00DA  1303               	bcf	3,6	;RP1=0, select bank0
  2177     00DB  07C1               	addwf	text_to_buffer@i,f
  2178     00DC  1803               	skipnc
  2179     00DD  0AC2               	incf	text_to_buffer@i+1,f
  2180     00DE  3000               	movlw	0
  2181     00DF  07C2               	addwf	text_to_buffer@i+1,f
  2182     00E0                     l1469:
  2183     00E0  0842               	movf	text_to_buffer@i+1,w
  2184     00E1  3A80               	xorlw	128
  2185     00E2  00FF               	movwf	btemp+1
  2186     00E3  3080               	movlw	128
  2187     00E4  027F               	subwf	btemp+1,w
  2188     00E5  1D03               	skipz
  2189     00E6  28E9               	goto	u695
  2190     00E7  3008               	movlw	8
  2191     00E8  0241               	subwf	text_to_buffer@i,w
  2192     00E9                     u695:
  2193     00E9  1C03               	skipc
  2194     00EA  28EC               	goto	u691
  2195     00EB  28ED               	goto	u690
  2196     00EC                     u691:
  2197     00EC  28C4               	goto	l1465
  2198     00ED                     u690:
  2199     00ED                     l227:
  2200     00ED  0008               	return
  2201     00EE                     __end_of_text_to_buffer:
  2202                           
  2203                           	psect	text3
  2204     0053                     __ptext3:	
  2205 ;; *************** function _send_buffer *****************
  2206 ;; Defined at:
  2207 ;;		line 70 in file "scherm.c"
  2208 ;; Parameters:    Size  Location     Type
  2209 ;;  scherm          1    wreg     enum E1453
  2210 ;; Auto vars:     Size  Location     Type
  2211 ;;  scherm          1    8[BANK0 ] enum E1453
  2212 ;;  i               2   11[BANK0 ] int 
  2213 ;;  i               2    9[BANK0 ] int 
  2214 ;; Return value:  Size  Location     Type
  2215 ;;                  1    wreg      void 
  2216 ;; Registers used:
  2217 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2218 ;; Tracked objects:
  2219 ;;		On entry : 0/0
  2220 ;;		On exit  : 0/0
  2221 ;;		Unchanged: 0/0
  2222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2223 ;;      Params:         0       0       0       0       0
  2224 ;;      Locals:         0       5       0       0       0
  2225 ;;      Temps:          0       1       0       0       0
  2226 ;;      Totals:         0       6       0       0       0
  2227 ;;Total ram usage:        6 bytes
  2228 ;; Hardware stack levels used: 1
  2229 ;; Hardware stack levels required when called: 3
  2230 ;; This function calls:
  2231 ;;		_spi_transmit
  2232 ;; This function is called by:
  2233 ;;		_main
  2234 ;; This function uses a non-reentrant model
  2235 ;;
  2236                           
  2237     0053                     _send_buffer:	
  2238                           ;psect for function _send_buffer
  2239                           
  2240                           
  2241                           ;incstack = 0
  2242                           ; Regs used in _send_buffer: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2243                           ;send_buffer@scherm stored from wreg
  2244     0053  1283               	bcf	3,5	;RP0=0, select bank0
  2245     0054  1303               	bcf	3,6	;RP1=0, select bank0
  2246     0055  00A8               	movwf	send_buffer@scherm
  2247     0056                     l1471:
  2248                           
  2249                           ;scherm.c: 71:     if(scherm == SCREEN_1){
  2250     0056  0328               	decf	send_buffer@scherm,w
  2251     0057  1D03               	btfss	3,2
  2252     0058  285A               	goto	u701
  2253     0059  285B               	goto	u700
  2254     005A                     u701:
  2255     005A  288A               	goto	l1491
  2256     005B                     u700:
  2257     005B                     l1473:
  2258                           
  2259                           ;scherm.c: 72:         PORTCbits.RC4 = 0;
  2260     005B  1207               	bcf	7,4	;volatile
  2261     005C                     l1475:
  2262                           
  2263                           ;scherm.c: 74:         for(int i = 0; i < 40; i++){
  2264     005C  01A9               	clrf	send_buffer@i
  2265     005D  01AA               	clrf	send_buffer@i+1
  2266     005E                     l1481:
  2267                           
  2268                           ;scherm.c: 75:             spi_transmit(scherm1_buffer[i]);
  2269     005E  1283               	bcf	3,5	;RP0=0, select bank0
  2270     005F  1303               	bcf	3,6	;RP1=0, select bank0
  2271     0060  0829               	movf	send_buffer@i,w
  2272     0061  3EA0               	addlw	(low (_scherm1_buffer| 0))& (0+255)
  2273     0062  0084               	movwf	4
  2274     0063  1383               	bcf	3,7	;select IRP bank1
  2275     0064  0800               	movf	0,w
  2276     0065  120A  158A  26C0  120A  118A  	fcall	_spi_transmit
  2277     006A                     l1483:
  2278                           
  2279                           ;scherm.c: 76:         }
  2280     006A  3001               	movlw	1
  2281     006B  1283               	bcf	3,5	;RP0=0, select bank0
  2282     006C  1303               	bcf	3,6	;RP1=0, select bank0
  2283     006D  07A9               	addwf	send_buffer@i,f
  2284     006E  1803               	skipnc
  2285     006F  0AAA               	incf	send_buffer@i+1,f
  2286     0070  3000               	movlw	0
  2287     0071  07AA               	addwf	send_buffer@i+1,f
  2288     0072                     l1485:
  2289     0072  082A               	movf	send_buffer@i+1,w
  2290     0073  3A80               	xorlw	128
  2291     0074  00FF               	movwf	btemp+1
  2292     0075  3080               	movlw	128
  2293     0076  027F               	subwf	btemp+1,w
  2294     0077  1D03               	skipz
  2295     0078  287B               	goto	u715
  2296     0079  3028               	movlw	40
  2297     007A  0229               	subwf	send_buffer@i,w
  2298     007B                     u715:
  2299     007B  1C03               	skipc
  2300     007C  287E               	goto	u711
  2301     007D  287F               	goto	u710
  2302     007E                     u711:
  2303     007E  285E               	goto	l1481
  2304     007F                     u710:
  2305     007F                     l1487:
  2306                           
  2307                           ;scherm.c: 77:         _delay((unsigned long)((200)*(500000/4000000.0)));
  2308     007F  3007               	movlw	7
  2309     0080  1283               	bcf	3,5	;RP0=0, select bank0
  2310     0081  1303               	bcf	3,6	;RP1=0, select bank0
  2311     0082  00A7               	movwf	??_send_buffer
  2312     0083                     u977:
  2313     0083  0BA7               	decfsz	??_send_buffer,f
  2314     0084  2883               	goto	u977
  2315     0085  0000               	nop
  2316     0086                     l1489:
  2317                           
  2318                           ;scherm.c: 78:         PORTCbits.RC4 = 1;
  2319     0086  1283               	bcf	3,5	;RP0=0, select bank0
  2320     0087  1303               	bcf	3,6	;RP1=0, select bank0
  2321     0088  1607               	bsf	7,4	;volatile
  2322                           
  2323                           ;scherm.c: 79:     }
  2324     0089  28BE               	goto	l208
  2325     008A                     l1491:
  2326     008A  3002               	movlw	2
  2327     008B  0628               	xorwf	send_buffer@scherm,w
  2328     008C  1D03               	btfss	3,2
  2329     008D  288F               	goto	u721
  2330     008E  2890               	goto	u720
  2331     008F                     u721:
  2332     008F  28BE               	goto	l208
  2333     0090                     u720:
  2334     0090                     l1493:
  2335                           
  2336                           ;scherm.c: 81:         PORTDbits.RD4 = 0;
  2337     0090  1208               	bcf	8,4	;volatile
  2338     0091                     l1495:
  2339                           
  2340                           ;scherm.c: 83:         for(int i = 0; i < 40; i++){
  2341     0091  01AB               	clrf	send_buffer@i_585
  2342     0092  01AC               	clrf	send_buffer@i_585+1
  2343     0093                     l1501:
  2344                           
  2345                           ;scherm.c: 84:             spi_transmit(scherm2_buffer[i]);
  2346     0093  1283               	bcf	3,5	;RP0=0, select bank0
  2347     0094  1303               	bcf	3,6	;RP1=0, select bank0
  2348     0095  082B               	movf	send_buffer@i_585,w
  2349     0096  3E90               	addlw	(low (_scherm2_buffer| (0+256)))& (0+255)
  2350     0097  0084               	movwf	4
  2351     0098  1783               	bsf	3,7	;select IRP bank3
  2352     0099  0800               	movf	0,w
  2353     009A  120A  158A  26C0  120A  118A  	fcall	_spi_transmit
  2354     009F                     l1503:
  2355                           
  2356                           ;scherm.c: 85:         }
  2357     009F  3001               	movlw	1
  2358     00A0  1283               	bcf	3,5	;RP0=0, select bank0
  2359     00A1  1303               	bcf	3,6	;RP1=0, select bank0
  2360     00A2  07AB               	addwf	send_buffer@i_585,f
  2361     00A3  1803               	skipnc
  2362     00A4  0AAC               	incf	send_buffer@i_585+1,f
  2363     00A5  3000               	movlw	0
  2364     00A6  07AC               	addwf	send_buffer@i_585+1,f
  2365     00A7                     l1505:
  2366     00A7  082C               	movf	send_buffer@i_585+1,w
  2367     00A8  3A80               	xorlw	128
  2368     00A9  00FF               	movwf	btemp+1
  2369     00AA  3080               	movlw	128
  2370     00AB  027F               	subwf	btemp+1,w
  2371     00AC  1D03               	skipz
  2372     00AD  28B0               	goto	u735
  2373     00AE  3028               	movlw	40
  2374     00AF  022B               	subwf	send_buffer@i_585,w
  2375     00B0                     u735:
  2376     00B0  1C03               	skipc
  2377     00B1  28B3               	goto	u731
  2378     00B2  28B4               	goto	u730
  2379     00B3                     u731:
  2380     00B3  2893               	goto	l1501
  2381     00B4                     u730:
  2382     00B4                     l1507:
  2383                           
  2384                           ;scherm.c: 86:         _delay((unsigned long)((200)*(500000/4000000.0)));
  2385     00B4  3007               	movlw	7
  2386     00B5  1283               	bcf	3,5	;RP0=0, select bank0
  2387     00B6  1303               	bcf	3,6	;RP1=0, select bank0
  2388     00B7  00A7               	movwf	??_send_buffer
  2389     00B8                     u987:
  2390     00B8  0BA7               	decfsz	??_send_buffer,f
  2391     00B9  28B8               	goto	u987
  2392     00BA  0000               	nop
  2393     00BB                     l1509:
  2394                           
  2395                           ;scherm.c: 87:         PORTDbits.RD4 = 1;
  2396     00BB  1283               	bcf	3,5	;RP0=0, select bank0
  2397     00BC  1303               	bcf	3,6	;RP1=0, select bank0
  2398     00BD  1608               	bsf	8,4	;volatile
  2399     00BE                     l208:
  2400     00BE  0008               	return
  2401     00BF                     __end_of_send_buffer:
  2402                           
  2403                           	psect	text4
  2404     0685                     __ptext4:	
  2405 ;; *************** function _scherm_init *****************
  2406 ;; Defined at:
  2407 ;;		line 3 in file "scherm.c"
  2408 ;; Parameters:    Size  Location     Type
  2409 ;;  helderheid      1    wreg     unsigned char 
  2410 ;; Auto vars:     Size  Location     Type
  2411 ;;  helderheid      1   10[BANK0 ] unsigned char 
  2412 ;;  i               2    8[BANK0 ] int 
  2413 ;;  controlWord_    1   12[BANK0 ] unsigned char 
  2414 ;;  controlWord_    1   11[BANK0 ] unsigned char 
  2415 ;; Return value:  Size  Location     Type
  2416 ;;                  1    wreg      void 
  2417 ;; Registers used:
  2418 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2419 ;; Tracked objects:
  2420 ;;		On entry : 0/0
  2421 ;;		On exit  : 0/0
  2422 ;;		Unchanged: 0/0
  2423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2424 ;;      Params:         0       0       0       0       0
  2425 ;;      Locals:         0       5       0       0       0
  2426 ;;      Temps:          0       1       0       0       0
  2427 ;;      Totals:         0       6       0       0       0
  2428 ;;Total ram usage:        6 bytes
  2429 ;; Hardware stack levels used: 1
  2430 ;; Hardware stack levels required when called: 3
  2431 ;; This function calls:
  2432 ;;		_spi_transmit
  2433 ;; This function is called by:
  2434 ;;		_main
  2435 ;; This function uses a non-reentrant model
  2436 ;;
  2437                           
  2438     0685                     _scherm_init:	
  2439                           ;psect for function _scherm_init
  2440                           
  2441                           
  2442                           ;incstack = 0
  2443                           ; Regs used in _scherm_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2444                           ;scherm_init@helderheid stored from wreg
  2445     0685  1283               	bcf	3,5	;RP0=0, select bank0
  2446     0686  1303               	bcf	3,6	;RP1=0, select bank0
  2447     0687  00AA               	movwf	scherm_init@helderheid
  2448     0688                     l1369:
  2449                           
  2450                           ;scherm.c: 4:     char controlWord_0 = 0b01110000;
  2451     0688  3070               	movlw	112
  2452     0689  00AC               	movwf	scherm_init@controlWord_0
  2453                           
  2454                           ;scherm.c: 5:     char controlWord_1 = 0b10000000;
  2455     068A  3080               	movlw	128
  2456     068B  00AB               	movwf	scherm_init@controlWord_1
  2457                           
  2458                           ;scherm.c: 7:     if(helderheid > 15){
  2459     068C  3010               	movlw	16
  2460     068D  022A               	subwf	scherm_init@helderheid,w
  2461     068E  1C03               	skipc
  2462     068F  2E91               	goto	u671
  2463     0690  2E92               	goto	u670
  2464     0691                     u671:
  2465     0691  2E94               	goto	l1373
  2466     0692                     u670:
  2467     0692                     l1371:
  2468                           
  2469                           ;scherm.c: 8:         helderheid = 15;
  2470     0692  300F               	movlw	15
  2471     0693  00AA               	movwf	scherm_init@helderheid
  2472     0694                     l1373:
  2473                           
  2474                           ;scherm.c: 11:     controlWord_0 = controlWord_0 + helderheid;
  2475     0694  082A               	movf	scherm_init@helderheid,w
  2476     0695  072C               	addwf	scherm_init@controlWord_0,w
  2477     0696  00AC               	movwf	scherm_init@controlWord_0
  2478     0697                     l1375:
  2479                           
  2480                           ;scherm.c: 13:     PORTCbits.RC2 = 1;
  2481     0697  1507               	bsf	7,2	;volatile
  2482     0698                     l1377:
  2483                           
  2484                           ;scherm.c: 14:     PORTCbits.RC4 = 1;
  2485     0698  1607               	bsf	7,4	;volatile
  2486     0699                     l1379:
  2487                           
  2488                           ;scherm.c: 15:     PORTCbits.RC6 = 0;
  2489     0699  1307               	bcf	7,6	;volatile
  2490     069A                     l1381:
  2491                           
  2492                           ;scherm.c: 16:     PORTCbits.RC7 = 1;
  2493     069A  1787               	bsf	7,7	;volatile
  2494     069B                     l1383:
  2495                           
  2496                           ;scherm.c: 18:     PORTDbits.RD2 = 1;
  2497     069B  1508               	bsf	8,2	;volatile
  2498     069C                     l1385:
  2499                           
  2500                           ;scherm.c: 19:     PORTDbits.RD4 = 1;
  2501     069C  1608               	bsf	8,4	;volatile
  2502     069D                     l1387:
  2503                           
  2504                           ;scherm.c: 20:     PORTDbits.RD6 = 0;
  2505     069D  1308               	bcf	8,6	;volatile
  2506     069E                     l1389:
  2507                           
  2508                           ;scherm.c: 21:     PORTDbits.RD7 = 1;
  2509     069E  1788               	bsf	8,7	;volatile
  2510     069F                     l1391:
  2511                           
  2512                           ;scherm.c: 23:     PORTCbits.RC2 = 0;
  2513     069F  1107               	bcf	7,2	;volatile
  2514     06A0                     l1393:
  2515                           
  2516                           ;scherm.c: 24:     PORTDbits.RD2 = 0;
  2517     06A0  1108               	bcf	8,2	;volatile
  2518     06A1                     l1395:
  2519                           
  2520                           ;scherm.c: 25:      _delay((unsigned long)((200)*(500000/4000000.0)));
  2521     06A1  3007               	movlw	7
  2522     06A2  1283               	bcf	3,5	;RP0=0, select bank0
  2523     06A3  1303               	bcf	3,6	;RP1=0, select bank0
  2524     06A4  00A7               	movwf	??_scherm_init
  2525     06A5                     u997:
  2526     06A5  0BA7               	decfsz	??_scherm_init,f
  2527     06A6  2EA5               	goto	u997
  2528     06A7  0000               	nop
  2529     06A8                     l1397:
  2530                           
  2531                           ;scherm.c: 26:     PORTCbits.RC2 = 1;
  2532     06A8  1283               	bcf	3,5	;RP0=0, select bank0
  2533     06A9  1303               	bcf	3,6	;RP1=0, select bank0
  2534     06AA  1507               	bsf	7,2	;volatile
  2535     06AB                     l1399:
  2536                           
  2537                           ;scherm.c: 27:     PORTDbits.RD2 = 1;
  2538     06AB  1508               	bsf	8,2	;volatile
  2539     06AC                     l1401:
  2540                           
  2541                           ;scherm.c: 29:     PORTCbits.RC7 = 0;
  2542     06AC  1387               	bcf	7,7	;volatile
  2543     06AD                     l1403:
  2544                           
  2545                           ;scherm.c: 30:     PORTDbits.RD7 = 0;
  2546     06AD  1388               	bcf	8,7	;volatile
  2547     06AE                     l1405:
  2548                           
  2549                           ;scherm.c: 32:     PORTCbits.RC4 = 0;
  2550     06AE  1207               	bcf	7,4	;volatile
  2551     06AF                     l1407:
  2552                           
  2553                           ;scherm.c: 33:     PORTDbits.RD4 = 0;
  2554     06AF  1208               	bcf	8,4	;volatile
  2555     06B0                     l1409:
  2556                           
  2557                           ;scherm.c: 34:     for(int i = 0; i < 40; i++){
  2558     06B0  01A8               	clrf	scherm_init@i
  2559     06B1  01A9               	clrf	scherm_init@i+1
  2560     06B2                     l1415:
  2561                           
  2562                           ;scherm.c: 35:         spi_transmit(0b00000000);
  2563     06B2  3000               	movlw	0
  2564     06B3  120A  158A  26C0  120A  118A  	fcall	_spi_transmit
  2565     06B8                     l1417:
  2566                           
  2567                           ;scherm.c: 36:     }
  2568     06B8  3001               	movlw	1
  2569     06B9  1283               	bcf	3,5	;RP0=0, select bank0
  2570     06BA  1303               	bcf	3,6	;RP1=0, select bank0
  2571     06BB  07A8               	addwf	scherm_init@i,f
  2572     06BC  1803               	skipnc
  2573     06BD  0AA9               	incf	scherm_init@i+1,f
  2574     06BE  3000               	movlw	0
  2575     06BF  07A9               	addwf	scherm_init@i+1,f
  2576     06C0                     l1419:
  2577     06C0  0829               	movf	scherm_init@i+1,w
  2578     06C1  3A80               	xorlw	128
  2579     06C2  00FF               	movwf	btemp+1
  2580     06C3  3080               	movlw	128
  2581     06C4  027F               	subwf	btemp+1,w
  2582     06C5  1D03               	skipz
  2583     06C6  2EC9               	goto	u685
  2584     06C7  3028               	movlw	40
  2585     06C8  0228               	subwf	scherm_init@i,w
  2586     06C9                     u685:
  2587     06C9  1C03               	skipc
  2588     06CA  2ECC               	goto	u681
  2589     06CB  2ECD               	goto	u680
  2590     06CC                     u681:
  2591     06CC  2EB2               	goto	l1415
  2592     06CD                     u680:
  2593     06CD                     l1421:
  2594                           
  2595                           ;scherm.c: 37:     _delay((unsigned long)((200)*(500000/4000000.0)));
  2596     06CD  3007               	movlw	7
  2597     06CE  1283               	bcf	3,5	;RP0=0, select bank0
  2598     06CF  1303               	bcf	3,6	;RP1=0, select bank0
  2599     06D0  00A7               	movwf	??_scherm_init
  2600     06D1                     u1007:
  2601     06D1  0BA7               	decfsz	??_scherm_init,f
  2602     06D2  2ED1               	goto	u1007
  2603     06D3  0000               	nop
  2604     06D4                     l1423:
  2605                           
  2606                           ;scherm.c: 38:     PORTCbits.RC4 = 1;
  2607     06D4  1283               	bcf	3,5	;RP0=0, select bank0
  2608     06D5  1303               	bcf	3,6	;RP1=0, select bank0
  2609     06D6  1607               	bsf	7,4	;volatile
  2610     06D7                     l1425:
  2611                           
  2612                           ;scherm.c: 39:     PORTDbits.RD4 = 1;
  2613     06D7  1608               	bsf	8,4	;volatile
  2614     06D8                     l1427:
  2615                           
  2616                           ;scherm.c: 41:     PORTCbits.RC7 = 1;
  2617     06D8  1787               	bsf	7,7	;volatile
  2618     06D9                     l1429:
  2619                           
  2620                           ;scherm.c: 42:     PORTDbits.RD7 = 1;
  2621     06D9  1788               	bsf	8,7	;volatile
  2622     06DA                     l1431:
  2623                           
  2624                           ;scherm.c: 45:     PORTCbits.RC4 = 0;
  2625     06DA  1207               	bcf	7,4	;volatile
  2626     06DB                     l1433:
  2627                           
  2628                           ;scherm.c: 46:     PORTDbits.RD4 = 0;
  2629     06DB  1208               	bcf	8,4	;volatile
  2630     06DC                     l1435:
  2631                           
  2632                           ;scherm.c: 48:     spi_transmit(controlWord_0);
  2633     06DC  082C               	movf	scherm_init@controlWord_0,w
  2634     06DD  120A  158A  26C0  120A  118A  	fcall	_spi_transmit
  2635     06E2                     l1437:
  2636                           
  2637                           ;scherm.c: 49:     spi_transmit(controlWord_0);
  2638     06E2  1283               	bcf	3,5	;RP0=0, select bank0
  2639     06E3  1303               	bcf	3,6	;RP1=0, select bank0
  2640     06E4  082C               	movf	scherm_init@controlWord_0,w
  2641     06E5  120A  158A  26C0  120A  118A  	fcall	_spi_transmit
  2642                           
  2643                           ;scherm.c: 50:     _delay((unsigned long)((200)*(500000/4000000.0)));
  2644     06EA  3007               	movlw	7
  2645     06EB  1283               	bcf	3,5	;RP0=0, select bank0
  2646     06EC  1303               	bcf	3,6	;RP1=0, select bank0
  2647     06ED  00A7               	movwf	??_scherm_init
  2648     06EE                     u1017:
  2649     06EE  0BA7               	decfsz	??_scherm_init,f
  2650     06EF  2EEE               	goto	u1017
  2651     06F0  0000               	nop
  2652     06F1                     l1439:
  2653                           
  2654                           ;scherm.c: 52:     PORTCbits.RC4 = 1;
  2655     06F1  1283               	bcf	3,5	;RP0=0, select bank0
  2656     06F2  1303               	bcf	3,6	;RP1=0, select bank0
  2657     06F3  1607               	bsf	7,4	;volatile
  2658     06F4                     l1441:
  2659                           
  2660                           ;scherm.c: 53:     PORTDbits.RD4 = 1;
  2661     06F4  1608               	bsf	8,4	;volatile
  2662     06F5                     l1443:
  2663                           
  2664                           ;scherm.c: 56:     PORTCbits.RC4 = 0;
  2665     06F5  1207               	bcf	7,4	;volatile
  2666     06F6                     l1445:
  2667                           
  2668                           ;scherm.c: 57:     PORTDbits.RD4 = 0;
  2669     06F6  1208               	bcf	8,4	;volatile
  2670     06F7                     l1447:
  2671                           
  2672                           ;scherm.c: 59:     spi_transmit(controlWord_1);
  2673     06F7  082B               	movf	scherm_init@controlWord_1,w
  2674     06F8  120A  158A  26C0  120A  118A  	fcall	_spi_transmit
  2675     06FD                     l1449:
  2676                           
  2677                           ;scherm.c: 60:     spi_transmit(controlWord_1);
  2678     06FD  1283               	bcf	3,5	;RP0=0, select bank0
  2679     06FE  1303               	bcf	3,6	;RP1=0, select bank0
  2680     06FF  082B               	movf	scherm_init@controlWord_1,w
  2681     0700  120A  158A  26C0  120A  118A  	fcall	_spi_transmit
  2682                           
  2683                           ;scherm.c: 61:     _delay((unsigned long)((200)*(500000/4000000.0)));
  2684     0705  3007               	movlw	7
  2685     0706  1283               	bcf	3,5	;RP0=0, select bank0
  2686     0707  1303               	bcf	3,6	;RP1=0, select bank0
  2687     0708  00A7               	movwf	??_scherm_init
  2688     0709                     u1027:
  2689     0709  0BA7               	decfsz	??_scherm_init,f
  2690     070A  2F09               	goto	u1027
  2691     070B  0000               	nop
  2692     070C                     l1451:
  2693                           
  2694                           ;scherm.c: 63:     PORTCbits.RC4 = 1;
  2695     070C  1283               	bcf	3,5	;RP0=0, select bank0
  2696     070D  1303               	bcf	3,6	;RP1=0, select bank0
  2697     070E  1607               	bsf	7,4	;volatile
  2698     070F                     l1453:
  2699                           
  2700                           ;scherm.c: 64:     PORTDbits.RD4 = 1;
  2701     070F  1608               	bsf	8,4	;volatile
  2702     0710                     l1455:
  2703                           
  2704                           ;scherm.c: 66:     PORTCbits.RC7 = 0;
  2705     0710  1387               	bcf	7,7	;volatile
  2706     0711                     l1457:
  2707                           
  2708                           ;scherm.c: 67:     PORTDbits.RD7 = 0;
  2709     0711  1388               	bcf	8,7	;volatile
  2710     0712                     l198:
  2711     0712  0008               	return
  2712     0713                     __end_of_scherm_init:
  2713                           
  2714                           	psect	text5
  2715     0EC0                     __ptext5:	
  2716 ;; *************** function _spi_transmit *****************
  2717 ;; Defined at:
  2718 ;;		line 58 in file "spi.c"
  2719 ;; Parameters:    Size  Location     Type
  2720 ;;  c               1    wreg     unsigned char 
  2721 ;; Auto vars:     Size  Location     Type
  2722 ;;  c               1    6[BANK0 ] unsigned char 
  2723 ;; Return value:  Size  Location     Type
  2724 ;;                  1    wreg      void 
  2725 ;; Registers used:
  2726 ;;		wreg
  2727 ;; Tracked objects:
  2728 ;;		On entry : 0/0
  2729 ;;		On exit  : 0/0
  2730 ;;		Unchanged: 0/0
  2731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2732 ;;      Params:         0       0       0       0       0
  2733 ;;      Locals:         0       1       0       0       0
  2734 ;;      Temps:          0       0       0       0       0
  2735 ;;      Totals:         0       1       0       0       0
  2736 ;;Total ram usage:        1 bytes
  2737 ;; Hardware stack levels used: 1
  2738 ;; Hardware stack levels required when called: 2
  2739 ;; This function calls:
  2740 ;;		Nothing
  2741 ;; This function is called by:
  2742 ;;		_scherm_init
  2743 ;;		_send_buffer
  2744 ;; This function uses a non-reentrant model
  2745 ;;
  2746                           
  2747     0EC0                     _spi_transmit:	
  2748                           ;psect for function _spi_transmit
  2749                           
  2750                           
  2751                           ;incstack = 0
  2752                           ; Regs used in _spi_transmit: [wreg]
  2753                           ;spi_transmit@c stored from wreg
  2754     0EC0  1283               	bcf	3,5	;RP0=0, select bank0
  2755     0EC1  1303               	bcf	3,6	;RP1=0, select bank0
  2756     0EC2  00A6               	movwf	spi_transmit@c
  2757     0EC3                     l1357:
  2758                           
  2759                           ;spi.c: 60:     SSPBUF = c;
  2760     0EC3  0826               	movf	spi_transmit@c,w
  2761     0EC4  0093               	movwf	19	;volatile
  2762     0EC5                     l248:
  2763     0EC5  0008               	return
  2764     0EC6                     __end_of_spi_transmit:
  2765                           
  2766                           	psect	text6
  2767     0F7E                     __ptext6:	
  2768 ;; *************** function _pic_init *****************
  2769 ;; Defined at:
  2770 ;;		line 90 in file "main.c"
  2771 ;; Parameters:    Size  Location     Type
  2772 ;;		None
  2773 ;; Auto vars:     Size  Location     Type
  2774 ;;		None
  2775 ;; Return value:  Size  Location     Type
  2776 ;;                  1    wreg      void 
  2777 ;; Registers used:
  2778 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2779 ;; Tracked objects:
  2780 ;;		On entry : 0/0
  2781 ;;		On exit  : 0/0
  2782 ;;		Unchanged: 0/0
  2783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2784 ;;      Params:         0       0       0       0       0
  2785 ;;      Locals:         0       0       0       0       0
  2786 ;;      Temps:          0       0       0       0       0
  2787 ;;      Totals:         0       0       0       0       0
  2788 ;;Total ram usage:        0 bytes
  2789 ;; Hardware stack levels used: 1
  2790 ;; Hardware stack levels required when called: 3
  2791 ;; This function calls:
  2792 ;;		_adc_init
  2793 ;;		_init_osc
  2794 ;;		_interrupt_init
  2795 ;;		_pins_init
  2796 ;;		_ports_init
  2797 ;;		_spi_init
  2798 ;; This function is called by:
  2799 ;;		_main
  2800 ;; This function uses a non-reentrant model
  2801 ;;
  2802                           
  2803     0F7E                     _pic_init:	
  2804                           ;psect for function _pic_init
  2805                           
  2806     0F7E                     l1359:	
  2807                           ;incstack = 0
  2808                           ; Regs used in _pic_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2809                           
  2810                           
  2811                           ;main.c: 91:     init_osc();
  2812     0F7E  120A  158A  26D9  120A  158A  	fcall	_init_osc
  2813                           
  2814                           ;main.c: 92:     ports_init();
  2815     0F83  120A  158A  2715  120A  158A  	fcall	_ports_init
  2816     0F88                     l1361:
  2817                           
  2818                           ;main.c: 93:     pins_init();
  2819     0F88  120A  158A  26CE  120A  158A  	fcall	_pins_init
  2820     0F8D                     l1363:
  2821                           
  2822                           ;main.c: 94:     adc_init();
  2823     0F8D  120A  158A  2740  120A  158A  	fcall	_adc_init
  2824     0F92                     l1365:
  2825                           
  2826                           ;main.c: 95:     spi_init(MST_OSC_DIV_04, SMP1_SDI_END, CKP0_CPOL0_IDLE_LOW, CKE1_CPHA0_
      +                          TRSMIT_ACT2IDL);
  2827     0F92  1283               	bcf	3,5	;RP0=0, select bank0
  2828     0F93  1303               	bcf	3,6	;RP1=0, select bank0
  2829     0F94  01A6               	clrf	spi_init@sdi_rx_smp
  2830     0F95  0AA6               	incf	spi_init@sdi_rx_smp,f
  2831     0F96  01A7               	clrf	spi_init@clock_pol
  2832     0F97  01A8               	clrf	spi_init@sdo_tx_edge
  2833     0F98  0AA8               	incf	spi_init@sdo_tx_edge,f
  2834     0F99  3000               	movlw	0
  2835     0F9A  120A  158A  27A5  120A  158A  	fcall	_spi_init
  2836     0F9F                     l1367:
  2837                           
  2838                           ;main.c: 96:     interrupt_init();
  2839     0F9F  120A  158A  26F3  120A  158A  	fcall	_interrupt_init
  2840     0FA4                     l114:
  2841     0FA4  0008               	return
  2842     0FA5                     __end_of_pic_init:
  2843                           
  2844                           	psect	text7
  2845     0FA5                     __ptext7:	
  2846 ;; *************** function _spi_init *****************
  2847 ;; Defined at:
  2848 ;;		line 14 in file "spi.c"
  2849 ;; Parameters:    Size  Location     Type
  2850 ;;  mst_slv_oscd    1    wreg     enum E1420
  2851 ;;  sdi_rx_smp      1    6[BANK0 ] enum E1428
  2852 ;;  clock_pol       1    7[BANK0 ] enum E1432
  2853 ;;  sdo_tx_edge     1    8[BANK0 ] enum E1436
  2854 ;; Auto vars:     Size  Location     Type
  2855 ;;  mst_slv_oscd    1    9[BANK0 ] enum E1420
  2856 ;; Return value:  Size  Location     Type
  2857 ;;                  1    wreg      void 
  2858 ;; Registers used:
  2859 ;;		wreg, status,2, status,0, btemp+1
  2860 ;; Tracked objects:
  2861 ;;		On entry : 0/0
  2862 ;;		On exit  : 0/0
  2863 ;;		Unchanged: 0/0
  2864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2865 ;;      Params:         0       3       0       0       0
  2866 ;;      Locals:         0       1       0       0       0
  2867 ;;      Temps:          0       0       0       0       0
  2868 ;;      Totals:         0       4       0       0       0
  2869 ;;Total ram usage:        4 bytes
  2870 ;; Hardware stack levels used: 1
  2871 ;; Hardware stack levels required when called: 2
  2872 ;; This function calls:
  2873 ;;		Nothing
  2874 ;; This function is called by:
  2875 ;;		_pic_init
  2876 ;; This function uses a non-reentrant model
  2877 ;;
  2878                           
  2879     0FA5                     _spi_init:	
  2880                           ;psect for function _spi_init
  2881                           
  2882                           
  2883                           ;incstack = 0
  2884                           ; Regs used in _spi_init: [wreg+status,2+status,0+btemp+1]
  2885                           ;spi_init@mst_slv_oscdiv stored from wreg
  2886     0FA5  1283               	bcf	3,5	;RP0=0, select bank0
  2887     0FA6  1303               	bcf	3,6	;RP1=0, select bank0
  2888     0FA7  00A9               	movwf	spi_init@mst_slv_oscdiv
  2889     0FA8                     l1291:
  2890                           
  2891                           ;spi.c: 17:     SSPCONbits.SSPM = mst_slv_oscdiv;
  2892     0FA8  0814               	movf	20,w	;volatile
  2893     0FA9  0629               	xorwf	spi_init@mst_slv_oscdiv,w
  2894     0FAA  39F0               	andlw	-16
  2895     0FAB  0629               	xorwf	spi_init@mst_slv_oscdiv,w
  2896     0FAC  0094               	movwf	20	;volatile
  2897     0FAD                     l1293:
  2898                           
  2899                           ;spi.c: 19:     TRISCbits.TRISC5 = 0;
  2900     0FAD  1683               	bsf	3,5	;RP0=1, select bank1
  2901     0FAE  1303               	bcf	3,6	;RP1=0, select bank1
  2902     0FAF  1287               	bcf	7,5	;volatile
  2903     0FB0                     l1295:
  2904                           
  2905                           ;spi.c: 20:     TRISCbits.TRISC4 = 0;
  2906     0FB0  1207               	bcf	7,4	;volatile
  2907     0FB1                     l1297:
  2908                           
  2909                           ;spi.c: 29:     if(mst_slv_oscdiv > 3){
  2910     0FB1  3004               	movlw	4
  2911     0FB2  1283               	bcf	3,5	;RP0=0, select bank0
  2912     0FB3  1303               	bcf	3,6	;RP1=0, select bank0
  2913     0FB4  0229               	subwf	spi_init@mst_slv_oscdiv,w
  2914     0FB5  1C03               	skipc
  2915     0FB6  2FB8               	goto	u561
  2916     0FB7  2FB9               	goto	u560
  2917     0FB8                     u561:
  2918     0FB8  2FCA               	goto	l1301
  2919     0FB9                     u560:
  2920     0FB9                     l1299:
  2921                           
  2922                           ;spi.c: 30:         SSPSTATbits.SMP = 0;
  2923     0FB9  1683               	bsf	3,5	;RP0=1, select bank1
  2924     0FBA  1303               	bcf	3,6	;RP1=0, select bank1
  2925     0FBB  1394               	bcf	20,7	;volatile
  2926                           
  2927                           ;spi.c: 31:         TRISCbits.TRISC3 = 1;
  2928     0FBC  1587               	bsf	7,3	;volatile
  2929                           
  2930                           ;spi.c: 32:         SSPCONbits.CKP = PORTCbits.RC3;
  2931     0FBD  1283               	bcf	3,5	;RP0=0, select bank0
  2932     0FBE  1303               	bcf	3,6	;RP1=0, select bank0
  2933     0FBF  1987               	btfsc	7,3	;volatile
  2934     0FC0  2FC2               	goto	u571
  2935     0FC1  2FC6               	goto	u570
  2936     0FC2                     u571:
  2937     0FC2  1283               	bcf	3,5	;RP0=0, select bank0
  2938     0FC3  1303               	bcf	3,6	;RP1=0, select bank0
  2939     0FC4  1614               	bsf	20,4	;volatile
  2940     0FC5  2FC9               	goto	u584
  2941     0FC6                     u570:
  2942     0FC6  1283               	bcf	3,5	;RP0=0, select bank0
  2943     0FC7  1303               	bcf	3,6	;RP1=0, select bank0
  2944     0FC8  1214               	bcf	20,4	;volatile
  2945     0FC9                     u584:
  2946                           
  2947                           ;spi.c: 33:     }
  2948     0FC9  2FD9               	goto	l241
  2949     0FCA                     l1301:
  2950                           
  2951                           ;spi.c: 41:         SSPSTATbits.SMP = sdi_rx_smp;
  2952     0FCA  0C26               	rrf	spi_init@sdi_rx_smp,w
  2953     0FCB  1683               	bsf	3,5	;RP0=1, select bank1
  2954     0FCC  1303               	bcf	3,6	;RP1=0, select bank1
  2955     0FCD  1C03               	skipc
  2956     0FCE  1394               	bcf	20,7	;volatile
  2957     0FCF  1803               	skipnc
  2958     0FD0  1794               	bsf	20,7	;volatile
  2959     0FD1                     l1303:
  2960                           
  2961                           ;spi.c: 42:         TRISCbits.TRISC3 = 0;
  2962     0FD1  1187               	bcf	7,3	;volatile
  2963                           
  2964                           ;spi.c: 43:         SSPCONbits.CKP = clock_pol;
  2965     0FD2  1283               	bcf	3,5	;RP0=0, select bank0
  2966     0FD3  1303               	bcf	3,6	;RP1=0, select bank0
  2967     0FD4  0C27               	rrf	spi_init@clock_pol,w
  2968     0FD5  1C03               	skipc
  2969     0FD6  1214               	bcf	20,4	;volatile
  2970     0FD7  1803               	skipnc
  2971     0FD8  1614               	bsf	20,4	;volatile
  2972     0FD9                     l241:	
  2973                           ;spi.c: 44:     }
  2974                           
  2975                           
  2976                           ;spi.c: 50:     SSPSTATbits.CKE = sdo_tx_edge;
  2977     0FD9  0C28               	rrf	spi_init@sdo_tx_edge,w
  2978     0FDA  1683               	bsf	3,5	;RP0=1, select bank1
  2979     0FDB  1303               	bcf	3,6	;RP1=0, select bank1
  2980     0FDC  1C03               	skipc
  2981     0FDD  1314               	bcf	20,6	;volatile
  2982     0FDE  1803               	skipnc
  2983     0FDF  1714               	bsf	20,6	;volatile
  2984     0FE0                     l1305:
  2985                           
  2986                           ;spi.c: 51:     if(clock_pol == 1 || PORTCbits.RC3 == 1){
  2987     0FE0  1283               	bcf	3,5	;RP0=0, select bank0
  2988     0FE1  1303               	bcf	3,6	;RP1=0, select bank0
  2989     0FE2  0327               	decf	spi_init@clock_pol,w
  2990     0FE3  1903               	btfsc	3,2
  2991     0FE4  2FE6               	goto	u591
  2992     0FE5  2FE7               	goto	u590
  2993     0FE6                     u591:
  2994     0FE6  2FEB               	goto	l1309
  2995     0FE7                     u590:
  2996     0FE7                     l1307:
  2997     0FE7  1D87               	btfss	7,3	;volatile
  2998     0FE8  2FEA               	goto	u601
  2999     0FE9  2FEB               	goto	u600
  3000     0FEA                     u601:
  3001     0FEA  2FFD               	goto	l1311
  3002     0FEB                     u600:
  3003     0FEB                     l1309:
  3004                           
  3005                           ;spi.c: 52:         SSPSTATbits.CKE ^= 1;
  3006     0FEB  1683               	bsf	3,5	;RP0=1, select bank1
  3007     0FEC  1303               	bcf	3,6	;RP1=0, select bank1
  3008     0FED  0E14               	swapf	20,w	;volatile
  3009     0FEE  00FF               	movwf	btemp+1
  3010     0FEF  0CFF               	rrf	btemp+1,f
  3011     0FF0  0C7F               	rrf	btemp+1,w
  3012     0FF1  3901               	andlw	1
  3013     0FF2  00FF               	movwf	btemp+1
  3014     0FF3  3001               	movlw	1
  3015     0FF4  06FF               	xorwf	btemp+1,f
  3016     0FF5  0EFF               	swapf	btemp+1,f
  3017     0FF6  0DFF               	rlf	btemp+1,f
  3018     0FF7  0DFF               	rlf	btemp+1,f
  3019     0FF8  0814               	movf	20,w	;volatile
  3020     0FF9  067F               	xorwf	btemp+1,w
  3021     0FFA  39BF               	andlw	-65
  3022     0FFB  067F               	xorwf	btemp+1,w
  3023     0FFC  0094               	movwf	20	;volatile
  3024     0FFD                     l1311:
  3025                           
  3026                           ;spi.c: 55:     SSPCONbits.SSPEN = 1;
  3027     0FFD  1283               	bcf	3,5	;RP0=0, select bank0
  3028     0FFE  1694               	bsf	20,5	;volatile
  3029     0FFF                     l245:
  3030     0FFF  0008               	return
  3031     1000                     __end_of_spi_init:
  3032                           
  3033                           	psect	text8
  3034     0F15                     __ptext8:	
  3035 ;; *************** function _ports_init *****************
  3036 ;; Defined at:
  3037 ;;		line 106 in file "main.c"
  3038 ;; Parameters:    Size  Location     Type
  3039 ;;		None
  3040 ;; Auto vars:     Size  Location     Type
  3041 ;;		None
  3042 ;; Return value:  Size  Location     Type
  3043 ;;                  1    wreg      void 
  3044 ;; Registers used:
  3045 ;;		wreg, status,2
  3046 ;; Tracked objects:
  3047 ;;		On entry : 0/0
  3048 ;;		On exit  : 0/0
  3049 ;;		Unchanged: 0/0
  3050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3051 ;;      Params:         0       0       0       0       0
  3052 ;;      Locals:         0       0       0       0       0
  3053 ;;      Temps:          0       0       0       0       0
  3054 ;;      Totals:         0       0       0       0       0
  3055 ;;Total ram usage:        0 bytes
  3056 ;; Hardware stack levels used: 1
  3057 ;; Hardware stack levels required when called: 2
  3058 ;; This function calls:
  3059 ;;		Nothing
  3060 ;; This function is called by:
  3061 ;;		_pic_init
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065     0F15                     _ports_init:	
  3066                           ;psect for function _ports_init
  3067                           
  3068     0F15                     l1271:	
  3069                           ;incstack = 0
  3070                           ; Regs used in _ports_init: [wreg+status,2]
  3071                           
  3072                           
  3073                           ;main.c: 107:     ANSEL = 0;
  3074     0F15  1683               	bsf	3,5	;RP0=1, select bank3
  3075     0F16  1703               	bsf	3,6	;RP1=1, select bank3
  3076     0F17  0188               	clrf	8	;volatile
  3077                           
  3078                           ;main.c: 108:     ANSELH = 0;
  3079     0F18  0189               	clrf	9	;volatile
  3080                           
  3081                           ;main.c: 110:     TRISA = 0;
  3082     0F19  1683               	bsf	3,5	;RP0=1, select bank1
  3083     0F1A  1303               	bcf	3,6	;RP1=0, select bank1
  3084     0F1B  0185               	clrf	5	;volatile
  3085                           
  3086                           ;main.c: 111:     TRISB = 0;
  3087     0F1C  0186               	clrf	6	;volatile
  3088                           
  3089                           ;main.c: 112:     TRISC = 0;
  3090     0F1D  0187               	clrf	7	;volatile
  3091                           
  3092                           ;main.c: 113:     TRISD = 0;
  3093     0F1E  0188               	clrf	8	;volatile
  3094                           
  3095                           ;main.c: 114:     TRISE = 0;
  3096     0F1F  0189               	clrf	9	;volatile
  3097                           
  3098                           ;main.c: 116:     PORTA = 0;
  3099     0F20  1283               	bcf	3,5	;RP0=0, select bank0
  3100     0F21  1303               	bcf	3,6	;RP1=0, select bank0
  3101     0F22  0185               	clrf	5	;volatile
  3102                           
  3103                           ;main.c: 117:     PORTB = 0;
  3104     0F23  0186               	clrf	6	;volatile
  3105     0F24                     l1273:
  3106                           
  3107                           ;main.c: 118:     PORTC = 0b00000011;
  3108     0F24  3003               	movlw	3
  3109     0F25  0087               	movwf	7	;volatile
  3110     0F26                     l1275:
  3111                           
  3112                           ;main.c: 119:     PORTD = 0;
  3113     0F26  0188               	clrf	8	;volatile
  3114     0F27                     l1277:
  3115                           
  3116                           ;main.c: 120:     PORTE = 0;
  3117     0F27  0189               	clrf	9	;volatile
  3118     0F28                     l123:
  3119     0F28  0008               	return
  3120     0F29                     __end_of_ports_init:
  3121                           
  3122                           	psect	text9
  3123     0ECE                     __ptext9:	
  3124 ;; *************** function _pins_init *****************
  3125 ;; Defined at:
  3126 ;;		line 123 in file "main.c"
  3127 ;; Parameters:    Size  Location     Type
  3128 ;;		None
  3129 ;; Auto vars:     Size  Location     Type
  3130 ;;		None
  3131 ;; Return value:  Size  Location     Type
  3132 ;;                  1    wreg      void 
  3133 ;; Registers used:
  3134 ;;		None
  3135 ;; Tracked objects:
  3136 ;;		On entry : 0/0
  3137 ;;		On exit  : 0/0
  3138 ;;		Unchanged: 0/0
  3139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3140 ;;      Params:         0       0       0       0       0
  3141 ;;      Locals:         0       0       0       0       0
  3142 ;;      Temps:          0       0       0       0       0
  3143 ;;      Totals:         0       0       0       0       0
  3144 ;;Total ram usage:        0 bytes
  3145 ;; Hardware stack levels used: 1
  3146 ;; Hardware stack levels required when called: 2
  3147 ;; This function calls:
  3148 ;;		Nothing
  3149 ;; This function is called by:
  3150 ;;		_pic_init
  3151 ;; This function uses a non-reentrant model
  3152 ;;
  3153                           
  3154     0ECE                     _pins_init:	
  3155                           ;psect for function _pins_init
  3156                           
  3157     0ECE                     l1279:	
  3158                           ;incstack = 0
  3159                           ; Regs used in _pins_init: []
  3160                           
  3161                           
  3162                           ;main.c: 124:     TRISEbits.TRISE2 = 1;
  3163     0ECE  1683               	bsf	3,5	;RP0=1, select bank1
  3164     0ECF  1303               	bcf	3,6	;RP1=0, select bank1
  3165     0ED0  1509               	bsf	9,2	;volatile
  3166                           
  3167                           ;main.c: 125:     ANSELbits.ANS7 = 1;
  3168     0ED1  1683               	bsf	3,5	;RP0=1, select bank3
  3169     0ED2  1703               	bsf	3,6	;RP1=1, select bank3
  3170     0ED3  1788               	bsf	8,7	;volatile
  3171                           
  3172                           ;main.c: 126:     TRISBbits.TRISB4 = 1;
  3173     0ED4  1683               	bsf	3,5	;RP0=1, select bank1
  3174     0ED5  1303               	bcf	3,6	;RP1=0, select bank1
  3175     0ED6  1606               	bsf	6,4	;volatile
  3176                           
  3177                           ;main.c: 127:     TRISBbits.TRISB5 = 1;
  3178     0ED7  1686               	bsf	6,5	;volatile
  3179     0ED8                     l126:
  3180     0ED8  0008               	return
  3181     0ED9                     __end_of_pins_init:
  3182                           
  3183                           	psect	text10
  3184     0EF3                     __ptext10:	
  3185 ;; *************** function _interrupt_init *****************
  3186 ;; Defined at:
  3187 ;;		line 130 in file "main.c"
  3188 ;; Parameters:    Size  Location     Type
  3189 ;;		None
  3190 ;; Auto vars:     Size  Location     Type
  3191 ;;		None
  3192 ;; Return value:  Size  Location     Type
  3193 ;;                  1    wreg      void 
  3194 ;; Registers used:
  3195 ;;		None
  3196 ;; Tracked objects:
  3197 ;;		On entry : 0/0
  3198 ;;		On exit  : 0/0
  3199 ;;		Unchanged: 0/0
  3200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3201 ;;      Params:         0       0       0       0       0
  3202 ;;      Locals:         0       0       0       0       0
  3203 ;;      Temps:          0       0       0       0       0
  3204 ;;      Totals:         0       0       0       0       0
  3205 ;;Total ram usage:        0 bytes
  3206 ;; Hardware stack levels used: 1
  3207 ;; Hardware stack levels required when called: 2
  3208 ;; This function calls:
  3209 ;;		Nothing
  3210 ;; This function is called by:
  3211 ;;		_pic_init
  3212 ;; This function uses a non-reentrant model
  3213 ;;
  3214                           
  3215     0EF3                     _interrupt_init:	
  3216                           ;psect for function _interrupt_init
  3217                           
  3218     0EF3                     l1313:	
  3219                           ;incstack = 0
  3220                           ; Regs used in _interrupt_init: []
  3221                           
  3222                           
  3223                           ;main.c: 131:     INTCONbits.RBIF = 0;
  3224     0EF3  100B               	bcf	11,0	;volatile
  3225                           
  3226                           ;main.c: 132:     INTCONbits.RBIE = 1;
  3227     0EF4  158B               	bsf	11,3	;volatile
  3228                           
  3229                           ;main.c: 133:     PIE1bits.ADIE = 1;
  3230     0EF5  1683               	bsf	3,5	;RP0=1, select bank1
  3231     0EF6  1303               	bcf	3,6	;RP1=0, select bank1
  3232     0EF7  170C               	bsf	12,6	;volatile
  3233                           
  3234                           ;main.c: 134:     PIR1bits.ADIF = 0;
  3235     0EF8  1283               	bcf	3,5	;RP0=0, select bank0
  3236     0EF9  1303               	bcf	3,6	;RP1=0, select bank0
  3237     0EFA  130C               	bcf	12,6	;volatile
  3238                           
  3239                           ;main.c: 135:     IOCBbits.IOCB4 = 1;
  3240     0EFB  1683               	bsf	3,5	;RP0=1, select bank1
  3241     0EFC  1303               	bcf	3,6	;RP1=0, select bank1
  3242     0EFD  1616               	bsf	22,4	;volatile
  3243                           
  3244                           ;main.c: 136:     IOCBbits.IOCB5 = 1;
  3245     0EFE  1696               	bsf	22,5	;volatile
  3246                           
  3247                           ;main.c: 137:     INTCONbits.PEIE = 1;
  3248     0EFF  170B               	bsf	11,6	;volatile
  3249                           
  3250                           ;main.c: 138:     INTCONbits.GIE = 1;
  3251     0F00  178B               	bsf	11,7	;volatile
  3252     0F01                     l129:
  3253     0F01  0008               	return
  3254     0F02                     __end_of_interrupt_init:
  3255                           
  3256                           	psect	text11
  3257     0ED9                     __ptext11:	
  3258 ;; *************** function _init_osc *****************
  3259 ;; Defined at:
  3260 ;;		line 99 in file "main.c"
  3261 ;; Parameters:    Size  Location     Type
  3262 ;;		None
  3263 ;; Auto vars:     Size  Location     Type
  3264 ;;		None
  3265 ;; Return value:  Size  Location     Type
  3266 ;;                  1    wreg      void 
  3267 ;; Registers used:
  3268 ;;		wreg, status,2, status,0
  3269 ;; Tracked objects:
  3270 ;;		On entry : 0/0
  3271 ;;		On exit  : 0/0
  3272 ;;		Unchanged: 0/0
  3273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3274 ;;      Params:         0       0       0       0       0
  3275 ;;      Locals:         0       0       0       0       0
  3276 ;;      Temps:          0       0       0       0       0
  3277 ;;      Totals:         0       0       0       0       0
  3278 ;;Total ram usage:        0 bytes
  3279 ;; Hardware stack levels used: 1
  3280 ;; Hardware stack levels required when called: 2
  3281 ;; This function calls:
  3282 ;;		Nothing
  3283 ;; This function is called by:
  3284 ;;		_pic_init
  3285 ;; This function uses a non-reentrant model
  3286 ;;
  3287                           
  3288     0ED9                     _init_osc:	
  3289                           ;psect for function _init_osc
  3290                           
  3291     0ED9                     l1265:	
  3292                           ;incstack = 0
  3293                           ; Regs used in _init_osc: [wreg+status,2+status,0]
  3294                           
  3295                           
  3296                           ;main.c: 100:     OSCCONbits.SCS = 0;
  3297     0ED9  1683               	bsf	3,5	;RP0=1, select bank1
  3298     0EDA  1303               	bcf	3,6	;RP1=0, select bank1
  3299     0EDB  100F               	bcf	15,0	;volatile
  3300     0EDC                     l1267:
  3301                           
  3302                           ;main.c: 101:     OSCCONbits.IRCF = 0b100;
  3303     0EDC  080F               	movf	15,w	;volatile
  3304     0EDD  398F               	andlw	-113
  3305     0EDE  3840               	iorlw	64
  3306     0EDF  008F               	movwf	15	;volatile
  3307     0EE0                     l1269:
  3308                           
  3309                           ;main.c: 102:     OSCCONbits.OSTS = 0b1;
  3310     0EE0  158F               	bsf	15,3	;volatile
  3311     0EE1                     l117:	
  3312                           ;main.c: 104:     while (OSCCONbits.HTS != 0b1);
  3313                           
  3314     0EE1  1D0F               	btfss	15,2	;volatile
  3315     0EE2  2EE4               	goto	u551
  3316     0EE3  2EE5               	goto	u550
  3317     0EE4                     u551:
  3318     0EE4  2EE1               	goto	l117
  3319     0EE5                     u550:
  3320     0EE5                     l120:
  3321     0EE5  0008               	return
  3322     0EE6                     __end_of_init_osc:
  3323                           
  3324                           	psect	text12
  3325     0F40                     __ptext12:	
  3326 ;; *************** function _adc_init *****************
  3327 ;; Defined at:
  3328 ;;		line 141 in file "main.c"
  3329 ;; Parameters:    Size  Location     Type
  3330 ;;		None
  3331 ;; Auto vars:     Size  Location     Type
  3332 ;;		None
  3333 ;; Return value:  Size  Location     Type
  3334 ;;                  1    wreg      void 
  3335 ;; Registers used:
  3336 ;;		wreg, status,2, status,0
  3337 ;; Tracked objects:
  3338 ;;		On entry : 0/0
  3339 ;;		On exit  : 0/0
  3340 ;;		Unchanged: 0/0
  3341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3342 ;;      Params:         0       0       0       0       0
  3343 ;;      Locals:         0       0       0       0       0
  3344 ;;      Temps:          0       0       0       0       0
  3345 ;;      Totals:         0       0       0       0       0
  3346 ;;Total ram usage:        0 bytes
  3347 ;; Hardware stack levels used: 1
  3348 ;; Hardware stack levels required when called: 2
  3349 ;; This function calls:
  3350 ;;		Nothing
  3351 ;; This function is called by:
  3352 ;;		_pic_init
  3353 ;; This function uses a non-reentrant model
  3354 ;;
  3355                           
  3356     0F40                     _adc_init:	
  3357                           ;psect for function _adc_init
  3358                           
  3359     0F40                     l1281:	
  3360                           ;incstack = 0
  3361                           ; Regs used in _adc_init: [wreg+status,2+status,0]
  3362                           
  3363                           
  3364                           ;main.c: 142:     ADCON0bits.ADCS = 0b10;
  3365     0F40  1283               	bcf	3,5	;RP0=0, select bank0
  3366     0F41  1303               	bcf	3,6	;RP1=0, select bank0
  3367     0F42  081F               	movf	31,w	;volatile
  3368     0F43  393F               	andlw	-193
  3369     0F44  3880               	iorlw	128
  3370     0F45  009F               	movwf	31	;volatile
  3371     0F46                     l1283:
  3372                           
  3373                           ;main.c: 143:     ADCON1bits.VCFG0 = 0;
  3374     0F46  1683               	bsf	3,5	;RP0=1, select bank1
  3375     0F47  1303               	bcf	3,6	;RP1=0, select bank1
  3376     0F48  121F               	bcf	31,4	;volatile
  3377     0F49                     l1285:
  3378                           
  3379                           ;main.c: 144:     ADCON1bits.VCFG1 = 0;
  3380     0F49  129F               	bcf	31,5	;volatile
  3381                           
  3382                           ;main.c: 145:     ADCON0bits.CHS = 0b0111;
  3383     0F4A  1283               	bcf	3,5	;RP0=0, select bank0
  3384     0F4B  1303               	bcf	3,6	;RP1=0, select bank0
  3385     0F4C  081F               	movf	31,w	;volatile
  3386     0F4D  39C3               	andlw	-61
  3387     0F4E  381C               	iorlw	28
  3388     0F4F  009F               	movwf	31	;volatile
  3389     0F50                     l1287:
  3390                           
  3391                           ;main.c: 146:     ADCON1bits.ADFM = 1;
  3392     0F50  1683               	bsf	3,5	;RP0=1, select bank1
  3393     0F51  1303               	bcf	3,6	;RP1=0, select bank1
  3394     0F52  179F               	bsf	31,7	;volatile
  3395     0F53                     l1289:
  3396                           
  3397                           ;main.c: 147:     ADCON0bits.ADON = 1;
  3398     0F53  1283               	bcf	3,5	;RP0=0, select bank0
  3399     0F54  1303               	bcf	3,6	;RP1=0, select bank0
  3400     0F55  141F               	bsf	31,0	;volatile
  3401     0F56                     l132:
  3402     0F56  0008               	return
  3403     0F57                     __end_of_adc_init:
  3404                           
  3405                           	psect	text13
  3406     00EE                     __ptext13:	
  3407 ;; *************** function _input_conversion *****************
  3408 ;; Defined at:
  3409 ;;		line 199 in file "main.c"
  3410 ;; Parameters:    Size  Location     Type
  3411 ;;		None
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;  input           1   30[BANK0 ] unsigned char 
  3414 ;; Return value:  Size  Location     Type
  3415 ;;                  1    wreg      void 
  3416 ;; Registers used:
  3417 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3418 ;; Tracked objects:
  3419 ;;		On entry : 0/0
  3420 ;;		On exit  : 0/0
  3421 ;;		Unchanged: 0/0
  3422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3423 ;;      Params:         0       0       0       0       0
  3424 ;;      Locals:         0       1       0       0       0
  3425 ;;      Temps:          0       0       0       0       0
  3426 ;;      Totals:         0       1       0       0       0
  3427 ;;Total ram usage:        1 bytes
  3428 ;; Hardware stack levels used: 1
  3429 ;; Hardware stack levels required when called: 4
  3430 ;; This function calls:
  3431 ;;		_load_buffer
  3432 ;; This function is called by:
  3433 ;;		_main
  3434 ;; This function uses a non-reentrant model
  3435 ;;
  3436                           
  3437     00EE                     _input_conversion:	
  3438                           ;psect for function _input_conversion
  3439                           
  3440     00EE                     l1511:	
  3441                           ;incstack = 0
  3442                           ; Regs used in _input_conversion: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3443                           
  3444                           
  3445                           ;main.c: 200:     char input = (char)count + nummerOffset;
  3446     00EE  1283               	bcf	3,5	;RP0=0, select bank0
  3447     00EF  1303               	bcf	3,6	;RP1=0, select bank0
  3448     00F0  0865               	movf	_count,w
  3449     00F1  3E30               	addlw	48
  3450     00F2  00BE               	movwf	input_conversion@input
  3451     00F3                     l1513:
  3452                           
  3453                           ;main.c: 202:     load_buffer(input, 6, SCREEN_2);
  3454     00F3  3006               	movlw	6
  3455     00F4  00AC               	movwf	load_buffer@position
  3456     00F5  3000               	movlw	0
  3457     00F6  00AD               	movwf	load_buffer@position+1
  3458     00F7  3002               	movlw	2
  3459     00F8  00AE               	movwf	load_buffer@scherm
  3460     00F9  083E               	movf	input_conversion@input,w
  3461     00FA  120A  118A  23E6  120A  118A  	fcall	_load_buffer
  3462     00FF                     l151:
  3463     00FF  0008               	return
  3464     0100                     __end_of_input_conversion:
  3465                           
  3466                           	psect	text14
  3467     03E6                     __ptext14:	
  3468 ;; *************** function _load_buffer *****************
  3469 ;; Defined at:
  3470 ;;		line 91 in file "scherm.c"
  3471 ;; Parameters:    Size  Location     Type
  3472 ;;  character       1    wreg     unsigned char 
  3473 ;;  position        2   12[BANK0 ] int 
  3474 ;;  scherm          1   14[BANK0 ] enum E1453
  3475 ;; Auto vars:     Size  Location     Type
  3476 ;;  character       1   23[BANK0 ] unsigned char 
  3477 ;;  i               2   28[BANK0 ] int 
  3478 ;;  i               2   26[BANK0 ] int 
  3479 ;;  i               2   24[BANK0 ] int 
  3480 ;; Return value:  Size  Location     Type
  3481 ;;                  1    wreg      void 
  3482 ;; Registers used:
  3483 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3484 ;; Tracked objects:
  3485 ;;		On entry : 0/0
  3486 ;;		On exit  : 0/0
  3487 ;;		Unchanged: 0/0
  3488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3489 ;;      Params:         0       3       0       0       0
  3490 ;;      Locals:         0       7       0       0       0
  3491 ;;      Temps:          0       8       0       0       0
  3492 ;;      Totals:         0      18       0       0       0
  3493 ;;Total ram usage:       18 bytes
  3494 ;; Hardware stack levels used: 1
  3495 ;; Hardware stack levels required when called: 3
  3496 ;; This function calls:
  3497 ;;		___bmul
  3498 ;;		___wmul
  3499 ;; This function is called by:
  3500 ;;		_volume_conversion
  3501 ;;		_input_conversion
  3502 ;;		_text_to_buffer
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506     03E6                     _load_buffer:	
  3507                           ;psect for function _load_buffer
  3508                           
  3509                           
  3510                           ;incstack = 0
  3511                           ; Regs used in _load_buffer: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3512                           ;load_buffer@character stored from wreg
  3513     03E6  1283               	bcf	3,5	;RP0=0, select bank0
  3514     03E7  1303               	bcf	3,6	;RP1=0, select bank0
  3515     03E8  00B7               	movwf	load_buffer@character
  3516     03E9                     l1315:
  3517                           
  3518                           ;scherm.c: 92:     if(scherm == SCREEN_1){
  3519     03E9  032E               	decf	load_buffer@scherm,w
  3520     03EA  1D03               	btfss	3,2
  3521     03EB  2BED               	goto	u611
  3522     03EC  2BEE               	goto	u610
  3523     03ED                     u611:
  3524     03ED  2C44               	goto	l1329
  3525     03EE                     u610:
  3526     03EE                     l1317:
  3527                           
  3528                           ;scherm.c: 93:         for(int i = 0; i < 5; i++){
  3529     03EE  01B8               	clrf	load_buffer@i
  3530     03EF  01B9               	clrf	load_buffer@i+1
  3531     03F0                     l1323:
  3532                           
  3533                           ;scherm.c: 94:             scherm1_buffer[position * 5 + i] = ascii[character][i];
  3534     03F0  1283               	bcf	3,5	;RP0=0, select bank0
  3535     03F1  1303               	bcf	3,6	;RP1=0, select bank0
  3536     03F2  0837               	movf	load_buffer@character,w
  3537     03F3  00AF               	movwf	??_load_buffer
  3538     03F4  01B0               	clrf	??_load_buffer+1
  3539     03F5  082F               	movf	??_load_buffer,w
  3540     03F6  00A6               	movwf	___wmul@multiplier
  3541     03F7  0830               	movf	??_load_buffer+1,w
  3542     03F8  00A7               	movwf	___wmul@multiplier+1
  3543     03F9  3005               	movlw	5
  3544     03FA  00A8               	movwf	___wmul@multiplicand
  3545     03FB  3000               	movlw	0
  3546     03FC  00A9               	movwf	___wmul@multiplicand+1
  3547     03FD  120A  158A  2757  120A  118A  	fcall	___wmul
  3548     0402  3012               	movlw	low (_ascii| (0+32768))
  3549     0403  1283               	bcf	3,5	;RP0=0, select bank0
  3550     0404  1303               	bcf	3,6	;RP1=0, select bank0
  3551     0405  00B1               	movwf	??_load_buffer+2
  3552     0406  3081               	movlw	high (_ascii| (0+32768))
  3553     0407  00B2               	movwf	??_load_buffer+3
  3554     0408  0826               	movf	?___wmul,w
  3555     0409  0731               	addwf	??_load_buffer+2,w
  3556     040A  00B3               	movwf	??_load_buffer+4
  3557     040B  0827               	movf	?___wmul+1,w
  3558     040C  1803               	skipnc
  3559     040D  0A27               	incf	?___wmul+1,w
  3560     040E  0732               	addwf	??_load_buffer+3,w
  3561     040F  00B4               	movwf	??_load_buffer+5
  3562     0410  0838               	movf	load_buffer@i,w
  3563     0411  0733               	addwf	??_load_buffer+4,w
  3564     0412  0084               	movwf	4
  3565     0413  0839               	movf	load_buffer@i+1,w
  3566     0414  1803               	skipnc
  3567     0415  0A39               	incf	load_buffer@i+1,w
  3568     0416  0734               	addwf	??_load_buffer+5,w
  3569     0417  00FF               	movwf	btemp+1
  3570     0418  120A  118A  2100  120A  118A  	fcall	stringtab
  3571     041D  00B5               	movwf	??_load_buffer+6
  3572     041E  3005               	movlw	5
  3573     041F  00A6               	movwf	___bmul@multiplicand
  3574     0420  082C               	movf	load_buffer@position,w
  3575     0421  120A  158A  2729  120A  118A  	fcall	___bmul
  3576     0426  3EA0               	addlw	(low (_scherm1_buffer| 0))& (0+255)
  3577     0427  1283               	bcf	3,5	;RP0=0, select bank0
  3578     0428  1303               	bcf	3,6	;RP1=0, select bank0
  3579     0429  0738               	addwf	load_buffer@i,w
  3580     042A  00B6               	movwf	??_load_buffer+7
  3581     042B  0836               	movf	??_load_buffer+7,w
  3582     042C  0084               	movwf	4
  3583     042D  0835               	movf	??_load_buffer+6,w
  3584     042E  1383               	bcf	3,7	;select IRP bank1
  3585     042F  0080               	movwf	0
  3586     0430                     l1325:
  3587                           
  3588                           ;scherm.c: 95:         }
  3589     0430  3001               	movlw	1
  3590     0431  07B8               	addwf	load_buffer@i,f
  3591     0432  1803               	skipnc
  3592     0433  0AB9               	incf	load_buffer@i+1,f
  3593     0434  3000               	movlw	0
  3594     0435  07B9               	addwf	load_buffer@i+1,f
  3595     0436                     l1327:
  3596     0436  0839               	movf	load_buffer@i+1,w
  3597     0437  3A80               	xorlw	128
  3598     0438  00FF               	movwf	btemp+1
  3599     0439  3080               	movlw	128
  3600     043A  027F               	subwf	btemp+1,w
  3601     043B  1D03               	skipz
  3602     043C  2C3F               	goto	u625
  3603     043D  3005               	movlw	5
  3604     043E  0238               	subwf	load_buffer@i,w
  3605     043F                     u625:
  3606     043F  1C03               	skipc
  3607     0440  2C42               	goto	u621
  3608     0441  2C43               	goto	u620
  3609     0442                     u621:
  3610     0442  2BF0               	goto	l1323
  3611     0443                     u620:
  3612     0443  2D39               	goto	l222
  3613     0444                     l1329:
  3614     0444  3002               	movlw	2
  3615     0445  062E               	xorwf	load_buffer@scherm,w
  3616     0446  1D03               	btfss	3,2
  3617     0447  2C49               	goto	u631
  3618     0448  2C4A               	goto	u630
  3619     0449                     u631:
  3620     0449  2CA0               	goto	l1343
  3621     044A                     u630:
  3622     044A                     l1331:
  3623                           
  3624                           ;scherm.c: 98:         for(int i = 0; i < 5; i++){
  3625     044A  01BA               	clrf	load_buffer@i_591
  3626     044B  01BB               	clrf	load_buffer@i_591+1
  3627     044C                     l1337:
  3628                           
  3629                           ;scherm.c: 99:             scherm2_buffer[position * 5 + i] = ascii[character][i];
  3630     044C  1283               	bcf	3,5	;RP0=0, select bank0
  3631     044D  1303               	bcf	3,6	;RP1=0, select bank0
  3632     044E  0837               	movf	load_buffer@character,w
  3633     044F  00AF               	movwf	??_load_buffer
  3634     0450  01B0               	clrf	??_load_buffer+1
  3635     0451  082F               	movf	??_load_buffer,w
  3636     0452  00A6               	movwf	___wmul@multiplier
  3637     0453  0830               	movf	??_load_buffer+1,w
  3638     0454  00A7               	movwf	___wmul@multiplier+1
  3639     0455  3005               	movlw	5
  3640     0456  00A8               	movwf	___wmul@multiplicand
  3641     0457  3000               	movlw	0
  3642     0458  00A9               	movwf	___wmul@multiplicand+1
  3643     0459  120A  158A  2757  120A  118A  	fcall	___wmul
  3644     045E  3012               	movlw	low (_ascii| (0+32768))
  3645     045F  1283               	bcf	3,5	;RP0=0, select bank0
  3646     0460  1303               	bcf	3,6	;RP1=0, select bank0
  3647     0461  00B1               	movwf	??_load_buffer+2
  3648     0462  3081               	movlw	high (_ascii| (0+32768))
  3649     0463  00B2               	movwf	??_load_buffer+3
  3650     0464  0826               	movf	?___wmul,w
  3651     0465  0731               	addwf	??_load_buffer+2,w
  3652     0466  00B3               	movwf	??_load_buffer+4
  3653     0467  0827               	movf	?___wmul+1,w
  3654     0468  1803               	skipnc
  3655     0469  0A27               	incf	?___wmul+1,w
  3656     046A  0732               	addwf	??_load_buffer+3,w
  3657     046B  00B4               	movwf	??_load_buffer+5
  3658     046C  083A               	movf	load_buffer@i_591,w
  3659     046D  0733               	addwf	??_load_buffer+4,w
  3660     046E  0084               	movwf	4
  3661     046F  083B               	movf	load_buffer@i_591+1,w
  3662     0470  1803               	skipnc
  3663     0471  0A3B               	incf	load_buffer@i_591+1,w
  3664     0472  0734               	addwf	??_load_buffer+5,w
  3665     0473  00FF               	movwf	btemp+1
  3666     0474  120A  118A  2100  120A  118A  	fcall	stringtab
  3667     0479  00B5               	movwf	??_load_buffer+6
  3668     047A  3005               	movlw	5
  3669     047B  00A6               	movwf	___bmul@multiplicand
  3670     047C  082C               	movf	load_buffer@position,w
  3671     047D  120A  158A  2729  120A  118A  	fcall	___bmul
  3672     0482  3E90               	addlw	(low (_scherm2_buffer| (0+256)))& (0+255)
  3673     0483  1283               	bcf	3,5	;RP0=0, select bank0
  3674     0484  1303               	bcf	3,6	;RP1=0, select bank0
  3675     0485  073A               	addwf	load_buffer@i_591,w
  3676     0486  00B6               	movwf	??_load_buffer+7
  3677     0487  0836               	movf	??_load_buffer+7,w
  3678     0488  0084               	movwf	4
  3679     0489  0835               	movf	??_load_buffer+6,w
  3680     048A  1783               	bsf	3,7	;select IRP bank3
  3681     048B  0080               	movwf	0
  3682     048C                     l1339:
  3683                           
  3684                           ;scherm.c: 100:         }
  3685     048C  3001               	movlw	1
  3686     048D  07BA               	addwf	load_buffer@i_591,f
  3687     048E  1803               	skipnc
  3688     048F  0ABB               	incf	load_buffer@i_591+1,f
  3689     0490  3000               	movlw	0
  3690     0491  07BB               	addwf	load_buffer@i_591+1,f
  3691     0492                     l1341:
  3692     0492  083B               	movf	load_buffer@i_591+1,w
  3693     0493  3A80               	xorlw	128
  3694     0494  00FF               	movwf	btemp+1
  3695     0495  3080               	movlw	128
  3696     0496  027F               	subwf	btemp+1,w
  3697     0497  1D03               	skipz
  3698     0498  2C9B               	goto	u645
  3699     0499  3005               	movlw	5
  3700     049A  023A               	subwf	load_buffer@i_591,w
  3701     049B                     u645:
  3702     049B  1C03               	skipc
  3703     049C  2C9E               	goto	u641
  3704     049D  2C9F               	goto	u640
  3705     049E                     u641:
  3706     049E  2C4C               	goto	l1337
  3707     049F                     u640:
  3708     049F  2D39               	goto	l222
  3709     04A0                     l1343:
  3710     04A0  3003               	movlw	3
  3711     04A1  062E               	xorwf	load_buffer@scherm,w
  3712     04A2  1D03               	btfss	3,2
  3713     04A3  2CA5               	goto	u651
  3714     04A4  2CA6               	goto	u650
  3715     04A5                     u651:
  3716     04A5  2D39               	goto	l222
  3717     04A6                     u650:
  3718     04A6                     l1345:
  3719                           
  3720                           ;scherm.c: 103:         for(int i = 0; i < 5; i++){
  3721     04A6  01BC               	clrf	load_buffer@i_592
  3722     04A7  01BD               	clrf	load_buffer@i_592+1
  3723     04A8                     l1351:
  3724                           
  3725                           ;scherm.c: 104:             scherm1_buffer[position * 5 + i] = ascii[character][i];
  3726     04A8  1283               	bcf	3,5	;RP0=0, select bank0
  3727     04A9  1303               	bcf	3,6	;RP1=0, select bank0
  3728     04AA  0837               	movf	load_buffer@character,w
  3729     04AB  00AF               	movwf	??_load_buffer
  3730     04AC  01B0               	clrf	??_load_buffer+1
  3731     04AD  082F               	movf	??_load_buffer,w
  3732     04AE  00A6               	movwf	___wmul@multiplier
  3733     04AF  0830               	movf	??_load_buffer+1,w
  3734     04B0  00A7               	movwf	___wmul@multiplier+1
  3735     04B1  3005               	movlw	5
  3736     04B2  00A8               	movwf	___wmul@multiplicand
  3737     04B3  3000               	movlw	0
  3738     04B4  00A9               	movwf	___wmul@multiplicand+1
  3739     04B5  120A  158A  2757  120A  118A  	fcall	___wmul
  3740     04BA  3012               	movlw	low (_ascii| (0+32768))
  3741     04BB  1283               	bcf	3,5	;RP0=0, select bank0
  3742     04BC  1303               	bcf	3,6	;RP1=0, select bank0
  3743     04BD  00B1               	movwf	??_load_buffer+2
  3744     04BE  3081               	movlw	high (_ascii| (0+32768))
  3745     04BF  00B2               	movwf	??_load_buffer+3
  3746     04C0  0826               	movf	?___wmul,w
  3747     04C1  0731               	addwf	??_load_buffer+2,w
  3748     04C2  00B3               	movwf	??_load_buffer+4
  3749     04C3  0827               	movf	?___wmul+1,w
  3750     04C4  1803               	skipnc
  3751     04C5  0A27               	incf	?___wmul+1,w
  3752     04C6  0732               	addwf	??_load_buffer+3,w
  3753     04C7  00B4               	movwf	??_load_buffer+5
  3754     04C8  083C               	movf	load_buffer@i_592,w
  3755     04C9  0733               	addwf	??_load_buffer+4,w
  3756     04CA  0084               	movwf	4
  3757     04CB  083D               	movf	load_buffer@i_592+1,w
  3758     04CC  1803               	skipnc
  3759     04CD  0A3D               	incf	load_buffer@i_592+1,w
  3760     04CE  0734               	addwf	??_load_buffer+5,w
  3761     04CF  00FF               	movwf	btemp+1
  3762     04D0  120A  118A  2100  120A  118A  	fcall	stringtab
  3763     04D5  00B5               	movwf	??_load_buffer+6
  3764     04D6  3005               	movlw	5
  3765     04D7  00A6               	movwf	___bmul@multiplicand
  3766     04D8  082C               	movf	load_buffer@position,w
  3767     04D9  120A  158A  2729  120A  118A  	fcall	___bmul
  3768     04DE  3EA0               	addlw	(low (_scherm1_buffer| 0))& (0+255)
  3769     04DF  1283               	bcf	3,5	;RP0=0, select bank0
  3770     04E0  1303               	bcf	3,6	;RP1=0, select bank0
  3771     04E1  073C               	addwf	load_buffer@i_592,w
  3772     04E2  00B6               	movwf	??_load_buffer+7
  3773     04E3  0836               	movf	??_load_buffer+7,w
  3774     04E4  0084               	movwf	4
  3775     04E5  0835               	movf	??_load_buffer+6,w
  3776     04E6  1383               	bcf	3,7	;select IRP bank1
  3777     04E7  0080               	movwf	0
  3778                           
  3779                           ;scherm.c: 105:             scherm2_buffer[position * 5 + i] = ascii[character][i];
  3780     04E8  0837               	movf	load_buffer@character,w
  3781     04E9  00AF               	movwf	??_load_buffer
  3782     04EA  01B0               	clrf	??_load_buffer+1
  3783     04EB  082F               	movf	??_load_buffer,w
  3784     04EC  00A6               	movwf	___wmul@multiplier
  3785     04ED  0830               	movf	??_load_buffer+1,w
  3786     04EE  00A7               	movwf	___wmul@multiplier+1
  3787     04EF  3005               	movlw	5
  3788     04F0  00A8               	movwf	___wmul@multiplicand
  3789     04F1  3000               	movlw	0
  3790     04F2  00A9               	movwf	___wmul@multiplicand+1
  3791     04F3  120A  158A  2757  120A  118A  	fcall	___wmul
  3792     04F8  3012               	movlw	low (_ascii| (0+32768))
  3793     04F9  1283               	bcf	3,5	;RP0=0, select bank0
  3794     04FA  1303               	bcf	3,6	;RP1=0, select bank0
  3795     04FB  00B1               	movwf	??_load_buffer+2
  3796     04FC  3081               	movlw	high (_ascii| (0+32768))
  3797     04FD  00B2               	movwf	??_load_buffer+3
  3798     04FE  0826               	movf	?___wmul,w
  3799     04FF  0731               	addwf	??_load_buffer+2,w
  3800     0500  00B3               	movwf	??_load_buffer+4
  3801     0501  0827               	movf	?___wmul+1,w
  3802     0502  1803               	skipnc
  3803     0503  0A27               	incf	?___wmul+1,w
  3804     0504  0732               	addwf	??_load_buffer+3,w
  3805     0505  00B4               	movwf	??_load_buffer+5
  3806     0506  083C               	movf	load_buffer@i_592,w
  3807     0507  0733               	addwf	??_load_buffer+4,w
  3808     0508  0084               	movwf	4
  3809     0509  083D               	movf	load_buffer@i_592+1,w
  3810     050A  1803               	skipnc
  3811     050B  0A3D               	incf	load_buffer@i_592+1,w
  3812     050C  0734               	addwf	??_load_buffer+5,w
  3813     050D  00FF               	movwf	btemp+1
  3814     050E  120A  118A  2100  120A  118A  	fcall	stringtab
  3815     0513  00B5               	movwf	??_load_buffer+6
  3816     0514  3005               	movlw	5
  3817     0515  00A6               	movwf	___bmul@multiplicand
  3818     0516  082C               	movf	load_buffer@position,w
  3819     0517  120A  158A  2729  120A  118A  	fcall	___bmul
  3820     051C  3E90               	addlw	(low (_scherm2_buffer| (0+256)))& (0+255)
  3821     051D  1283               	bcf	3,5	;RP0=0, select bank0
  3822     051E  1303               	bcf	3,6	;RP1=0, select bank0
  3823     051F  073C               	addwf	load_buffer@i_592,w
  3824     0520  00B6               	movwf	??_load_buffer+7
  3825     0521  0836               	movf	??_load_buffer+7,w
  3826     0522  0084               	movwf	4
  3827     0523  0835               	movf	??_load_buffer+6,w
  3828     0524  1783               	bsf	3,7	;select IRP bank3
  3829     0525  0080               	movwf	0
  3830     0526                     l1353:
  3831                           
  3832                           ;scherm.c: 106:         }
  3833     0526  3001               	movlw	1
  3834     0527  07BC               	addwf	load_buffer@i_592,f
  3835     0528  1803               	skipnc
  3836     0529  0ABD               	incf	load_buffer@i_592+1,f
  3837     052A  3000               	movlw	0
  3838     052B  07BD               	addwf	load_buffer@i_592+1,f
  3839     052C                     l1355:
  3840     052C  083D               	movf	load_buffer@i_592+1,w
  3841     052D  3A80               	xorlw	128
  3842     052E  00FF               	movwf	btemp+1
  3843     052F  3080               	movlw	128
  3844     0530  027F               	subwf	btemp+1,w
  3845     0531  1D03               	skipz
  3846     0532  2D35               	goto	u665
  3847     0533  3005               	movlw	5
  3848     0534  023C               	subwf	load_buffer@i_592,w
  3849     0535                     u665:
  3850     0535  1C03               	skipc
  3851     0536  2D38               	goto	u661
  3852     0537  2D39               	goto	u660
  3853     0538                     u661:
  3854     0538  2CA8               	goto	l1351
  3855     0539                     u660:
  3856     0539                     l222:
  3857     0539  0008               	return
  3858     053A                     __end_of_load_buffer:
  3859                           
  3860                           	psect	text15
  3861     0F57                     __ptext15:	
  3862 ;; *************** function ___wmul *****************
  3863 ;; Defined at:
  3864 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  3865 ;; Parameters:    Size  Location     Type
  3866 ;;  multiplier      2    6[BANK0 ] unsigned int 
  3867 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  3868 ;; Auto vars:     Size  Location     Type
  3869 ;;  product         2   10[BANK0 ] unsigned int 
  3870 ;; Return value:  Size  Location     Type
  3871 ;;                  2    6[BANK0 ] unsigned int 
  3872 ;; Registers used:
  3873 ;;		wreg, status,2, status,0
  3874 ;; Tracked objects:
  3875 ;;		On entry : 0/0
  3876 ;;		On exit  : 0/0
  3877 ;;		Unchanged: 0/0
  3878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3879 ;;      Params:         0       4       0       0       0
  3880 ;;      Locals:         0       2       0       0       0
  3881 ;;      Temps:          0       0       0       0       0
  3882 ;;      Totals:         0       6       0       0       0
  3883 ;;Total ram usage:        6 bytes
  3884 ;; Hardware stack levels used: 1
  3885 ;; Hardware stack levels required when called: 2
  3886 ;; This function calls:
  3887 ;;		Nothing
  3888 ;; This function is called by:
  3889 ;;		_load_buffer
  3890 ;; This function uses a non-reentrant model
  3891 ;;
  3892                           
  3893     0F57                     ___wmul:	
  3894                           ;psect for function ___wmul
  3895                           
  3896     0F57                     l1235:	
  3897                           ;incstack = 0
  3898                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3899                           
  3900     0F57  1283               	bcf	3,5	;RP0=0, select bank0
  3901     0F58  1303               	bcf	3,6	;RP1=0, select bank0
  3902     0F59  01AA               	clrf	___wmul@product
  3903     0F5A  01AB               	clrf	___wmul@product+1
  3904     0F5B                     l1237:
  3905     0F5B  1C26               	btfss	___wmul@multiplier,0
  3906     0F5C  2F5E               	goto	u491
  3907     0F5D  2F5F               	goto	u490
  3908     0F5E                     u491:
  3909     0F5E  2F65               	goto	l343
  3910     0F5F                     u490:
  3911     0F5F                     l1239:
  3912     0F5F  0828               	movf	___wmul@multiplicand,w
  3913     0F60  07AA               	addwf	___wmul@product,f
  3914     0F61  1803               	skipnc
  3915     0F62  0AAB               	incf	___wmul@product+1,f
  3916     0F63  0829               	movf	___wmul@multiplicand+1,w
  3917     0F64  07AB               	addwf	___wmul@product+1,f
  3918     0F65                     l343:
  3919     0F65  3001               	movlw	1
  3920     0F66                     u505:
  3921     0F66  1003               	clrc
  3922     0F67  0DA8               	rlf	___wmul@multiplicand,f
  3923     0F68  0DA9               	rlf	___wmul@multiplicand+1,f
  3924     0F69  3EFF               	addlw	-1
  3925     0F6A  1D03               	skipz
  3926     0F6B  2F66               	goto	u505
  3927     0F6C                     l1241:
  3928     0F6C  3001               	movlw	1
  3929     0F6D                     u515:
  3930     0F6D  1003               	clrc
  3931     0F6E  0CA7               	rrf	___wmul@multiplier+1,f
  3932     0F6F  0CA6               	rrf	___wmul@multiplier,f
  3933     0F70  3EFF               	addlw	-1
  3934     0F71  1D03               	skipz
  3935     0F72  2F6D               	goto	u515
  3936     0F73                     l1243:
  3937     0F73  0826               	movf	___wmul@multiplier,w
  3938     0F74  0427               	iorwf	___wmul@multiplier+1,w
  3939     0F75  1D03               	btfss	3,2
  3940     0F76  2F78               	goto	u521
  3941     0F77  2F79               	goto	u520
  3942     0F78                     u521:
  3943     0F78  2F5B               	goto	l1237
  3944     0F79                     u520:
  3945     0F79                     l1245:
  3946     0F79  082B               	movf	___wmul@product+1,w
  3947     0F7A  00A7               	movwf	?___wmul+1
  3948     0F7B  082A               	movf	___wmul@product,w
  3949     0F7C  00A6               	movwf	?___wmul
  3950     0F7D                     l345:
  3951     0F7D  0008               	return
  3952     0F7E                     __end_of___wmul:
  3953                           
  3954                           	psect	text16
  3955     0F29                     __ptext16:	
  3956 ;; *************** function ___bmul *****************
  3957 ;; Defined at:
  3958 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul8.c"
  3959 ;; Parameters:    Size  Location     Type
  3960 ;;  multiplier      1    wreg     unsigned char 
  3961 ;;  multiplicand    1    6[BANK0 ] unsigned char 
  3962 ;; Auto vars:     Size  Location     Type
  3963 ;;  multiplier      1    8[BANK0 ] unsigned char 
  3964 ;;  product         1    7[BANK0 ] unsigned char 
  3965 ;; Return value:  Size  Location     Type
  3966 ;;                  1    wreg      unsigned char 
  3967 ;; Registers used:
  3968 ;;		wreg, status,2, status,0, btemp+1
  3969 ;; Tracked objects:
  3970 ;;		On entry : 0/0
  3971 ;;		On exit  : 0/0
  3972 ;;		Unchanged: 0/0
  3973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3974 ;;      Params:         0       1       0       0       0
  3975 ;;      Locals:         0       2       0       0       0
  3976 ;;      Temps:          0       0       0       0       0
  3977 ;;      Totals:         0       3       0       0       0
  3978 ;;Total ram usage:        3 bytes
  3979 ;; Hardware stack levels used: 1
  3980 ;; Hardware stack levels required when called: 2
  3981 ;; This function calls:
  3982 ;;		Nothing
  3983 ;; This function is called by:
  3984 ;;		_load_buffer
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987                           
  3988     0F29                     ___bmul:	
  3989                           ;psect for function ___bmul
  3990                           
  3991                           
  3992                           ;incstack = 0
  3993                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+1]
  3994                           ;___bmul@multiplier stored from wreg
  3995     0F29  1283               	bcf	3,5	;RP0=0, select bank0
  3996     0F2A  1303               	bcf	3,6	;RP1=0, select bank0
  3997     0F2B  00A8               	movwf	___bmul@multiplier
  3998     0F2C                     l1249:
  3999     0F2C  01A7               	clrf	___bmul@product
  4000     0F2D                     l1251:
  4001     0F2D  1C28               	btfss	___bmul@multiplier,0
  4002     0F2E  2F30               	goto	u531
  4003     0F2F  2F31               	goto	u530
  4004     0F30                     u531:
  4005     0F30  2F35               	goto	l1255
  4006     0F31                     u530:
  4007     0F31                     l1253:
  4008     0F31  0826               	movf	___bmul@multiplicand,w
  4009     0F32  00FF               	movwf	btemp+1
  4010     0F33  087F               	movf	btemp+1,w
  4011     0F34  07A7               	addwf	___bmul@product,f
  4012     0F35                     l1255:
  4013     0F35  1003               	clrc
  4014     0F36  0DA6               	rlf	___bmul@multiplicand,f
  4015     0F37                     l1257:
  4016     0F37  1003               	clrc
  4017     0F38  0CA8               	rrf	___bmul@multiplier,f
  4018     0F39                     l1259:
  4019     0F39  0828               	movf	___bmul@multiplier,w
  4020     0F3A  1D03               	btfss	3,2
  4021     0F3B  2F3D               	goto	u541
  4022     0F3C  2F3E               	goto	u540
  4023     0F3D                     u541:
  4024     0F3D  2F2D               	goto	l1251
  4025     0F3E                     u540:
  4026     0F3E                     l1261:
  4027     0F3E  0827               	movf	___bmul@product,w
  4028     0F3F                     l369:
  4029     0F3F  0008               	return
  4030     0F40                     __end_of___bmul:
  4031                           
  4032                           	psect	text17
  4033     05EA                     __ptext17:	
  4034 ;; *************** function _ISR *****************
  4035 ;; Defined at:
  4036 ;;		line 244 in file "main.c"
  4037 ;; Parameters:    Size  Location     Type
  4038 ;;		None
  4039 ;; Auto vars:     Size  Location     Type
  4040 ;;  adcValue        2    4[BANK0 ] int 
  4041 ;;  lowerValue      2    2[BANK0 ] int 
  4042 ;;  upperValue      2    0[BANK0 ] int 
  4043 ;; Return value:  Size  Location     Type
  4044 ;;                  1    wreg      void 
  4045 ;; Registers used:
  4046 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4047 ;; Tracked objects:
  4048 ;;		On entry : 0/0
  4049 ;;		On exit  : 0/0
  4050 ;;		Unchanged: 0/0
  4051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4052 ;;      Params:         0       0       0       0       0
  4053 ;;      Locals:         0       6       0       0       0
  4054 ;;      Temps:          7       0       0       0       0
  4055 ;;      Totals:         7       6       0       0       0
  4056 ;;Total ram usage:       13 bytes
  4057 ;; Hardware stack levels used: 1
  4058 ;; Hardware stack levels required when called: 1
  4059 ;; This function calls:
  4060 ;;		_rotaryHandeling
  4061 ;; This function is called by:
  4062 ;;		Interrupt level 1
  4063 ;; This function uses a non-reentrant model
  4064 ;;
  4065                           
  4066     05EA                     _ISR:	
  4067                           ;psect for function _ISR
  4068                           
  4069     05EA                     i1l1637:
  4070                           
  4071                           ;main.c: 245:     if(PIR1bits.ADIF == 1){
  4072     05EA  1283               	bcf	3,5	;RP0=0, select bank0
  4073     05EB  1303               	bcf	3,6	;RP1=0, select bank0
  4074     05EC  1F0C               	btfss	12,6	;volatile
  4075     05ED  2DEF               	goto	u91_21
  4076     05EE  2DF0               	goto	u91_20
  4077     05EF                     u91_21:
  4078     05EF  2E71               	goto	i1l1657
  4079     05F0                     u91_20:
  4080     05F0                     i1l1639:
  4081                           
  4082                           ;main.c: 246:         int adcValue = ADRESH << 8 | ADRESL;
  4083     05F0  081E               	movf	30,w	;volatile
  4084     05F1  00A5               	movwf	ISR@adcValue+1
  4085     05F2  1683               	bsf	3,5	;RP0=1, select bank1
  4086     05F3  1303               	bcf	3,6	;RP1=0, select bank1
  4087     05F4  081E               	movf	30,w	;volatile
  4088     05F5  1283               	bcf	3,5	;RP0=0, select bank0
  4089     05F6  1303               	bcf	3,6	;RP1=0, select bank0
  4090     05F7  00A4               	movwf	ISR@adcValue
  4091     05F8                     i1l1641:
  4092                           
  4093                           ;main.c: 247:         int upperValue = adcBounds[volume + 1] + 5;
  4094     05F8  0868               	movf	_volume,w
  4095     05F9  00F4               	movwf	??_ISR
  4096     05FA  0774               	addwf	??_ISR,w
  4097     05FB  3E94               	addlw	low ((_adcBounds| (0+32768)+2))
  4098     05FC  0084               	movwf	4
  4099     05FD  3083               	movlw	high ((_adcBounds| (0+32768)+2))
  4100     05FE  1803               	skipnc
  4101     05FF  3E01               	addlw	1
  4102     0600  00FF               	movwf	btemp+1
  4103     0601  120A  118A  2100  120A  118A  	fcall	stringtab
  4104     0606  00F5               	movwf	??_ISR+1
  4105     0607  120A  118A  2100  120A  118A  	fcall	stringtab
  4106     060C  00F6               	movwf	??_ISR+2
  4107     060D  0875               	movf	??_ISR+1,w
  4108     060E  3E05               	addlw	5
  4109     060F  00A0               	movwf	ISR@upperValue
  4110     0610  0876               	movf	??_ISR+2,w
  4111     0611  1803               	skipnc
  4112     0612  3E01               	addlw	1
  4113     0613  3E00               	addlw	0
  4114     0614  00A1               	movwf	ISR@upperValue+1
  4115     0615                     i1l1643:
  4116                           
  4117                           ;main.c: 248:         int lowerValue = adcBounds[volume] - 5;
  4118     0615  0868               	movf	_volume,w
  4119     0616  00F4               	movwf	??_ISR
  4120     0617  0774               	addwf	??_ISR,w
  4121     0618  3E92               	addlw	low (_adcBounds| (0+32768))
  4122     0619  0084               	movwf	4
  4123     061A  3083               	movlw	high (_adcBounds| (0+32768))
  4124     061B  1803               	skipnc
  4125     061C  3E01               	addlw	1
  4126     061D  00FF               	movwf	btemp+1
  4127     061E  120A  118A  2100  120A  118A  	fcall	stringtab
  4128     0623  00F5               	movwf	??_ISR+1
  4129     0624  120A  118A  2100  120A  118A  	fcall	stringtab
  4130     0629  00F6               	movwf	??_ISR+2
  4131     062A  0875               	movf	??_ISR+1,w
  4132     062B  3EFB               	addlw	251
  4133     062C  00A2               	movwf	ISR@lowerValue
  4134     062D  0876               	movf	??_ISR+2,w
  4135     062E  1803               	skipnc
  4136     062F  3E01               	addlw	1
  4137     0630  3EFF               	addlw	255
  4138     0631  00A3               	movwf	ISR@lowerValue+1
  4139                           
  4140                           ;main.c: 250:         if ( adcValue >= upperValue && volume != 40){
  4141     0632  0825               	movf	ISR@adcValue+1,w
  4142     0633  3A80               	xorlw	128
  4143     0634  00F4               	movwf	??_ISR
  4144     0635  0821               	movf	ISR@upperValue+1,w
  4145     0636  3A80               	xorlw	128
  4146     0637  0274               	subwf	??_ISR,w
  4147     0638  1D03               	skipz
  4148     0639  2E3C               	goto	u92_25
  4149     063A  0820               	movf	ISR@upperValue,w
  4150     063B  0224               	subwf	ISR@adcValue,w
  4151     063C                     u92_25:
  4152     063C  1C03               	skipc
  4153     063D  2E3F               	goto	u92_21
  4154     063E  2E40               	goto	u92_20
  4155     063F                     u92_21:
  4156     063F  2E50               	goto	i1l1649
  4157     0640                     u92_20:
  4158     0640                     i1l1645:
  4159     0640  3028               	movlw	40
  4160     0641  1283               	bcf	3,5	;RP0=0, select bank0
  4161     0642  1303               	bcf	3,6	;RP1=0, select bank0
  4162     0643  0668               	xorwf	_volume,w
  4163     0644  0469               	iorwf	_volume+1,w
  4164     0645  1903               	btfsc	3,2
  4165     0646  2E48               	goto	u93_21
  4166     0647  2E49               	goto	u93_20
  4167     0648                     u93_21:
  4168     0648  2E50               	goto	i1l1649
  4169     0649                     u93_20:
  4170     0649                     i1l1647:
  4171                           
  4172                           ;main.c: 251:             volume++;
  4173     0649  3001               	movlw	1
  4174     064A  07E8               	addwf	_volume,f
  4175     064B  1803               	skipnc
  4176     064C  0AE9               	incf	_volume+1,f
  4177     064D  3000               	movlw	0
  4178     064E  07E9               	addwf	_volume+1,f
  4179                           
  4180                           ;main.c: 252:         }
  4181     064F  2E6E               	goto	i1l1655
  4182     0650                     i1l1649:
  4183     0650  1283               	bcf	3,5	;RP0=0, select bank0
  4184     0651  1303               	bcf	3,6	;RP1=0, select bank0
  4185     0652  0823               	movf	ISR@lowerValue+1,w
  4186     0653  3A80               	xorlw	128
  4187     0654  00F4               	movwf	??_ISR
  4188     0655  0825               	movf	ISR@adcValue+1,w
  4189     0656  3A80               	xorlw	128
  4190     0657  0274               	subwf	??_ISR,w
  4191     0658  1D03               	skipz
  4192     0659  2E5C               	goto	u94_25
  4193     065A  0824               	movf	ISR@adcValue,w
  4194     065B  0222               	subwf	ISR@lowerValue,w
  4195     065C                     u94_25:
  4196     065C  1C03               	skipc
  4197     065D  2E5F               	goto	u94_21
  4198     065E  2E60               	goto	u94_20
  4199     065F                     u94_21:
  4200     065F  2E6E               	goto	i1l1655
  4201     0660                     u94_20:
  4202     0660                     i1l1651:
  4203     0660  1283               	bcf	3,5	;RP0=0, select bank0
  4204     0661  1303               	bcf	3,6	;RP1=0, select bank0
  4205     0662  0868               	movf	_volume,w
  4206     0663  0469               	iorwf	_volume+1,w
  4207     0664  1903               	btfsc	3,2
  4208     0665  2E67               	goto	u95_21
  4209     0666  2E68               	goto	u95_20
  4210     0667                     u95_21:
  4211     0667  2E6E               	goto	i1l1655
  4212     0668                     u95_20:
  4213     0668                     i1l1653:
  4214                           
  4215                           ;main.c: 254:             volume--;
  4216     0668  30FF               	movlw	255
  4217     0669  07E8               	addwf	_volume,f
  4218     066A  1803               	skipnc
  4219     066B  0AE9               	incf	_volume+1,f
  4220     066C  30FF               	movlw	255
  4221     066D  07E9               	addwf	_volume+1,f
  4222     066E                     i1l1655:
  4223                           
  4224                           ;main.c: 256:         PIR1bits.ADIF = 0;
  4225     066E  1283               	bcf	3,5	;RP0=0, select bank0
  4226     066F  1303               	bcf	3,6	;RP1=0, select bank0
  4227     0670  130C               	bcf	12,6	;volatile
  4228     0671                     i1l1657:
  4229                           
  4230                           ;main.c: 258:     if(INTCONbits.RBIF==1){
  4231     0671  1C0B               	btfss	11,0	;volatile
  4232     0672  2E74               	goto	u96_21
  4233     0673  2E75               	goto	u96_20
  4234     0674                     u96_21:
  4235     0674  2E7A               	goto	i1l176
  4236     0675                     u96_20:
  4237     0675                     i1l1659:
  4238                           
  4239                           ;main.c: 259:         rotaryHandeling();
  4240     0675  120A  118A  2785  120A  118A  	fcall	_rotaryHandeling
  4241     067A                     i1l176:
  4242     067A  087A               	movf	??_ISR+6,w
  4243     067B  00FF               	movwf	btemp+1
  4244     067C  0879               	movf	??_ISR+5,w
  4245     067D  008A               	movwf	10
  4246     067E  0878               	movf	??_ISR+4,w
  4247     067F  0084               	movwf	4
  4248     0680  0E77               	swapf	??_ISR+3,w
  4249     0681  0083               	movwf	3
  4250     0682  0EFE               	swapf	btemp,f
  4251     0683  0E7E               	swapf	btemp,w
  4252     0684  0009               	retfie
  4253     0685                     __end_of_ISR:
  4254                           
  4255                           	psect	intentry
  4256     0004                     __pintentry:	
  4257                           ;incstack = 0
  4258                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4259                           
  4260     0004                     interrupt_function:
  4261     007E                     saved_w	set	btemp
  4262     0004  00FE               	movwf	btemp
  4263     0005  0E03               	swapf	3,w
  4264     0006  00F7               	movwf	??_ISR+3
  4265     0007  0804               	movf	4,w
  4266     0008  00F8               	movwf	??_ISR+4
  4267     0009  080A               	movf	10,w
  4268     000A  00F9               	movwf	??_ISR+5
  4269     000B  087F               	movf	btemp+1,w
  4270     000C  00FA               	movwf	??_ISR+6
  4271     000D  120A  118A  2DEA   	ljmp	_ISR
  4272                           
  4273                           	psect	text18
  4274     0785                     __ptext18:	
  4275 ;; *************** function _rotaryHandeling *****************
  4276 ;; Defined at:
  4277 ;;		line 205 in file "main.c"
  4278 ;; Parameters:    Size  Location     Type
  4279 ;;		None
  4280 ;; Auto vars:     Size  Location     Type
  4281 ;;  state           1    3[COMMON] unsigned char 
  4282 ;; Return value:  Size  Location     Type
  4283 ;;                  1    wreg      void 
  4284 ;; Registers used:
  4285 ;;		wreg, status,2, status,0
  4286 ;; Tracked objects:
  4287 ;;		On entry : 0/0
  4288 ;;		On exit  : 0/0
  4289 ;;		Unchanged: 0/0
  4290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4291 ;;      Params:         0       0       0       0       0
  4292 ;;      Locals:         1       0       0       0       0
  4293 ;;      Temps:          3       0       0       0       0
  4294 ;;      Totals:         4       0       0       0       0
  4295 ;;Total ram usage:        4 bytes
  4296 ;; Hardware stack levels used: 1
  4297 ;; This function calls:
  4298 ;;		Nothing
  4299 ;; This function is called by:
  4300 ;;		_ISR
  4301 ;; This function uses a non-reentrant model
  4302 ;;
  4303                           
  4304     0785                     _rotaryHandeling:	
  4305                           ;psect for function _rotaryHandeling
  4306                           
  4307     0785                     i1l1575:	
  4308                           ;incstack = 0
  4309                           ; Regs used in _rotaryHandeling: [wreg+status,2+status,0]
  4310                           
  4311                           
  4312                           ;main.c: 206:     unsigned char state;;main.c: 207:     static unsigned char oldstate;;m
      +                          ain.c: 208:     _delay((unsigned long)((1)*(500000/4000.0)));
  4313     0785  3029               	movlw	41
  4314     0786  00F0               	movwf	??_rotaryHandeling
  4315     0787                     u103_27:
  4316     0787  0BF0               	decfsz	??_rotaryHandeling,f
  4317     0788  2F87               	goto	u103_27
  4318     0789  0000               	nop
  4319     078A                     i1l1577:
  4320                           
  4321                           ;main.c: 209:     state = (unsigned char)(PORTBbits.RB4 << 1 | PORTBbits.RB5);
  4322     078A  1283               	bcf	3,5	;RP0=0, select bank0
  4323     078B  1303               	bcf	3,6	;RP1=0, select bank0
  4324     078C  0E06               	swapf	6,w	;volatile
  4325     078D  00F0               	movwf	??_rotaryHandeling
  4326     078E  0C70               	rrf	??_rotaryHandeling,w
  4327     078F  3901               	andlw	1
  4328     0790  00F1               	movwf	??_rotaryHandeling+1
  4329     0791  0E06               	swapf	6,w	;volatile
  4330     0792  3901               	andlw	1
  4331     0793  00F2               	movwf	??_rotaryHandeling+2
  4332     0794  0772               	addwf	??_rotaryHandeling+2,w
  4333     0795  0471               	iorwf	??_rotaryHandeling+1,w
  4334     0796  00F3               	movwf	rotaryHandeling@state
  4335     0797                     i1l1579:
  4336                           
  4337                           ;main.c: 211:     if(oldstate == 0x0){
  4338     0797  087D               	movf	rotaryHandeling@oldstate,w
  4339     0798  1D03               	btfss	3,2
  4340     0799  2F9B               	goto	u81_21
  4341     079A  2F9C               	goto	u81_20
  4342     079B                     u81_21:
  4343     079B  2FF1               	goto	i1l156
  4344     079C                     u81_20:
  4345     079C                     i1l1581:
  4346                           
  4347                           ;main.c: 212:         if(state == 0x1){
  4348     079C  0373               	decf	rotaryHandeling@state,w
  4349     079D  1D03               	btfss	3,2
  4350     079E  2FA0               	goto	u82_21
  4351     079F  2FA1               	goto	u82_20
  4352     07A0                     u82_21:
  4353     07A0  2FC7               	goto	i1l1595
  4354     07A1                     u82_20:
  4355     07A1                     i1l1583:
  4356                           
  4357                           ;main.c: 213:             miniCount--;
  4358     07A1  30FF               	movlw	255
  4359     07A2  07FB               	addwf	_miniCount,f
  4360     07A3  1803               	skipnc
  4361     07A4  0AFC               	incf	_miniCount+1,f
  4362     07A5  30FF               	movlw	255
  4363     07A6  07FC               	addwf	_miniCount+1,f
  4364     07A7                     i1l1585:
  4365                           
  4366                           ;main.c: 214:             if(miniCount == 0){
  4367     07A7  087B               	movf	_miniCount,w
  4368     07A8  047C               	iorwf	_miniCount+1,w
  4369     07A9  1D03               	btfss	3,2
  4370     07AA  2FAC               	goto	u83_21
  4371     07AB  2FAD               	goto	u83_20
  4372     07AC                     u83_21:
  4373     07AC  2FF1               	goto	i1l156
  4374     07AD                     u83_20:
  4375     07AD                     i1l1587:
  4376                           
  4377                           ;main.c: 215:                 miniCount = 3;
  4378     07AD  3003               	movlw	3
  4379     07AE  00FB               	movwf	_miniCount
  4380     07AF  3000               	movlw	0
  4381     07B0  00FC               	movwf	_miniCount+1
  4382     07B1                     i1l1589:
  4383                           
  4384                           ;main.c: 216:                 if(count != 1){
  4385     07B1  0365               	decf	_count,w
  4386     07B2  0466               	iorwf	_count+1,w
  4387     07B3  1903               	btfsc	3,2
  4388     07B4  2FB6               	goto	u84_21
  4389     07B5  2FB7               	goto	u84_20
  4390     07B6                     u84_21:
  4391     07B6  2FBE               	goto	i1l1593
  4392     07B7                     u84_20:
  4393     07B7                     i1l1591:
  4394                           
  4395                           ;main.c: 217:                     count--;
  4396     07B7  30FF               	movlw	255
  4397     07B8  07E5               	addwf	_count,f
  4398     07B9  1803               	skipnc
  4399     07BA  0AE6               	incf	_count+1,f
  4400     07BB  30FF               	movlw	255
  4401     07BC  07E6               	addwf	_count+1,f
  4402                           
  4403                           ;main.c: 218:                 }
  4404     07BD  2FC2               	goto	i1l160
  4405     07BE                     i1l1593:
  4406                           
  4407                           ;main.c: 220:                     count = 4;
  4408     07BE  3004               	movlw	4
  4409     07BF  00E5               	movwf	_count
  4410     07C0  3000               	movlw	0
  4411     07C1  00E6               	movwf	_count+1
  4412     07C2                     i1l160:	
  4413                           ;main.c: 221:                 }
  4414                           
  4415                           
  4416                           ;main.c: 222:                 switchLeds = 1;
  4417     07C2  3001               	movlw	1
  4418     07C3  00E3               	movwf	_switchLeds
  4419     07C4  3000               	movlw	0
  4420     07C5  00E4               	movwf	_switchLeds+1
  4421     07C6  2FF1               	goto	i1l156
  4422     07C7                     i1l1595:
  4423     07C7  3002               	movlw	2
  4424     07C8  0673               	xorwf	rotaryHandeling@state,w
  4425     07C9  1D03               	btfss	3,2
  4426     07CA  2FCC               	goto	u85_21
  4427     07CB  2FCD               	goto	u85_20
  4428     07CC                     u85_21:
  4429     07CC  2FF1               	goto	i1l156
  4430     07CD                     u85_20:
  4431     07CD                     i1l1597:
  4432                           
  4433                           ;main.c: 226:             miniCount++;
  4434     07CD  3001               	movlw	1
  4435     07CE  07FB               	addwf	_miniCount,f
  4436     07CF  1803               	skipnc
  4437     07D0  0AFC               	incf	_miniCount+1,f
  4438     07D1  3000               	movlw	0
  4439     07D2  07FC               	addwf	_miniCount+1,f
  4440     07D3                     i1l1599:
  4441                           
  4442                           ;main.c: 227:             if(miniCount == (3 * 2)){
  4443     07D3  3006               	movlw	6
  4444     07D4  067B               	xorwf	_miniCount,w
  4445     07D5  047C               	iorwf	_miniCount+1,w
  4446     07D6  1D03               	btfss	3,2
  4447     07D7  2FD9               	goto	u86_21
  4448     07D8  2FDA               	goto	u86_20
  4449     07D9                     u86_21:
  4450     07D9  2FF1               	goto	i1l156
  4451     07DA                     u86_20:
  4452     07DA                     i1l1601:
  4453                           
  4454                           ;main.c: 228:                 miniCount = 3;
  4455     07DA  3003               	movlw	3
  4456     07DB  00FB               	movwf	_miniCount
  4457     07DC  3000               	movlw	0
  4458     07DD  00FC               	movwf	_miniCount+1
  4459     07DE                     i1l1603:
  4460                           
  4461                           ;main.c: 229:                 if(count != 4){
  4462     07DE  3004               	movlw	4
  4463     07DF  0665               	xorwf	_count,w
  4464     07E0  0466               	iorwf	_count+1,w
  4465     07E1  1903               	btfsc	3,2
  4466     07E2  2FE4               	goto	u87_21
  4467     07E3  2FE5               	goto	u87_20
  4468     07E4                     u87_21:
  4469     07E4  2FEC               	goto	i1l1607
  4470     07E5                     u87_20:
  4471     07E5                     i1l1605:
  4472                           
  4473                           ;main.c: 230:                     count++;
  4474     07E5  3001               	movlw	1
  4475     07E6  07E5               	addwf	_count,f
  4476     07E7  1803               	skipnc
  4477     07E8  0AE6               	incf	_count+1,f
  4478     07E9  3000               	movlw	0
  4479     07EA  07E6               	addwf	_count+1,f
  4480                           
  4481                           ;main.c: 231:                 }
  4482     07EB  2FC2               	goto	i1l160
  4483     07EC                     i1l1607:
  4484                           
  4485                           ;main.c: 233:                     count = 1;
  4486     07EC  3001               	movlw	1
  4487     07ED  00E5               	movwf	_count
  4488     07EE  3000               	movlw	0
  4489     07EF  00E6               	movwf	_count+1
  4490     07F0  2FC2               	goto	i1l160
  4491     07F1                     i1l156:	
  4492                           ;main.c: 238:     }
  4493                           
  4494                           
  4495                           ;main.c: 239:     oldstate = state;
  4496     07F1  0873               	movf	rotaryHandeling@state,w
  4497     07F2  00FD               	movwf	rotaryHandeling@oldstate
  4498                           
  4499                           ;main.c: 240:     PORTB = PORTB;
  4500     07F3  0806               	movf	6,w	;volatile
  4501     07F4  0086               	movwf	6	;volatile
  4502     07F5                     i1l1609:
  4503                           
  4504                           ;main.c: 241:     INTCONbits.RBIF = 0;
  4505     07F5  100B               	bcf	11,0	;volatile
  4506     07F6                     i1l166:
  4507     07F6  0008               	return
  4508     07F7                     __end_of_rotaryHandeling:
  4509     007E                     btemp	set	126	;btemp
  4510     007E                     wtemp0	set	126
  4511                           
  4512                           	psect	config
  4513                           
  4514                           ;Config register CONFIG1 @ 0x2007
  4515                           ;	Oscillator Selection bits
  4516                           ;	FOSC = INTRC_CLKOUT, INTOSC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, I/O fu
      +                          nction on RA7/OSC1/CLKIN
  4517                           ;	Watchdog Timer Enable bit
  4518                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  4519                           ;	Power-up Timer Enable bit
  4520                           ;	PWRTE = OFF, PWRT disabled
  4521                           ;	RE3/MCLR pin function select bit
  4522                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  4523                           ;	Code Protection bit
  4524                           ;	CP = OFF, Program memory code protection is disabled
  4525                           ;	Data Code Protection bit
  4526                           ;	CPD = OFF, Data memory code protection is disabled
  4527                           ;	Brown Out Reset Selection bits
  4528                           ;	BOREN = ON, BOR enabled
  4529                           ;	Internal External Switchover bit
  4530                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  4531                           ;	Fail-Safe Clock Monitor Enabled bit
  4532                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  4533                           ;	Low Voltage Programming Enable bit
  4534                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  4535                           ;	In-Circuit Debugger Mode bit
  4536                           ;	DEBUG = 0x1, unprogrammed default
  4537     2007                     	org	8199
  4538     2007  23D5               	dw	9173
  4539                           
  4540                           ;Config register CONFIG2 @ 0x2008
  4541                           ;	Brown-out Reset Selection bit
  4542                           ;	BOR4V = BOR21V, Brown-out Reset set to 2.1V
  4543                           ;	Flash Program Memory Self Write Enable bits
  4544                           ;	WRT = OFF, Write protection off
  4545     2008                     	org	8200
  4546     2008  3EFF               	dw	16127

Data Sizes:
    Strings     0
    Constant    724
    Data        23
    BSS         83
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     59      74
    BANK1            80      0      48
    BANK3            96      0      40
    BANK2            96      0       0

Pointer List with Targets:

    text_to_buffer@newtext	PTR unsigned char  size(1) Largest target is 8
		 -> main@screen1(BANK0[8]), main@screen2(BANK0[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_rotaryHandeling

Critical Paths under _main in BANK0

    _main->_text_to_buffer
    _main->_volume_conversion
    _volume_conversion->_load_buffer
    _text_to_buffer->_load_buffer
    _send_buffer->_spi_transmit
    _scherm_init->_spi_transmit
    _pic_init->_spi_init
    _input_conversion->_load_buffer
    _load_buffer->___wmul

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    21      4    9083
                                             35 BANK0     24    20      4
                   _input_conversion
                           _pic_init
                        _scherm_init
                        _send_buffer
                     _text_to_buffer
                  _volume_conversion
 ---------------------------------------------------------------------------------
 (1) _volume_conversion                                    5     5      0    2995
                                             30 BANK0      5     5      0
                        _load_buffer
 ---------------------------------------------------------------------------------
 (1) _text_to_buffer                                       5     4      1    2746
                                             30 BANK0      5     4      1
                        _load_buffer
 ---------------------------------------------------------------------------------
 (1) _send_buffer                                          6     6      0     202
                                              7 BANK0      6     6      0
                       _spi_transmit
 ---------------------------------------------------------------------------------
 (1) _scherm_init                                          6     6      0     226
                                              7 BANK0      6     6      0
                       _spi_transmit
 ---------------------------------------------------------------------------------
 (2) _spi_transmit                                         1     1      0      22
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _pic_init                                             0     0      0     360
                           _adc_init
                           _init_osc
                     _interrupt_init
                          _pins_init
                         _ports_init
                           _spi_init
 ---------------------------------------------------------------------------------
 (2) _spi_init                                             4     1      3     360
                                              6 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _ports_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pins_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _interrupt_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_osc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _input_conversion                                     1     1      0    2483
                                             30 BANK0      1     1      0
                        _load_buffer
 ---------------------------------------------------------------------------------
 (2) _load_buffer                                         18    15      3    2460
                                             12 BANK0     18    15      3
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1100
                                              6 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     196
                                              6 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                 13    13      0     158
                                              4 COMMON     7     7      0
                                              0 BANK0      6     6      0
                    _rotaryHandeling
 ---------------------------------------------------------------------------------
 (5) _rotaryHandeling                                      4     4      0      67
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _input_conversion
     _load_buffer
       ___bmul
       ___wmul
   _pic_init
     _adc_init
     _init_osc
     _interrupt_init
     _pins_init
     _ports_init
     _spi_init
   _scherm_init
     _spi_transmit
   _send_buffer
     _spi_transmit
   _text_to_buffer
     _load_buffer
   _volume_conversion
     _load_buffer

 _ISR (ROOT)
   _rotaryHandeling

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      28       9       41.7%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      30       7       60.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     3B      4A       5       92.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      B0      12        0.0%
ABS                  0      0      B0       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu Jan 18 11:51:19 2024

                        pc 0002             ___bmul@product 0027                _SSPSTATbits 0094  
                       _GO 00F9     spi_init@mst_slv_oscdiv 0029                         fsr 0004  
      ___wmul@multiplicand 0028     __end_of_interrupt_init 0F02                        l120 0EE5  
                      l114 0FA4                        l123 0F28                        l132 0F56  
                      l117 0EE1                        l222 0539                        l126 0ED8  
                      l151 00FF                        l208 00BE                        l129 0F01  
                      l241 0FD9                        l227 00ED                        l148 05E9  
                      l245 0FFF                        l343 0F65                        l248 0EC5  
                      l345 0F7D                        l198 0712                        l369 0F3F  
                      u520 0F79                        u600 0FEB                        u521 0F78  
                      u505 0F66                        u601 0FEA                        u530 0F31  
                      u610 03EE                        u531 0F30                        u515 0F6D  
                      u611 03ED                        u540 0F3E                        u620 0443  
                      u700 005B                        _ISR 05EA                        u541 0F3D  
                      u621 0442                        u701 005A                        u630 044A  
                      u550 0EE5                        u710 007F                        u631 0449  
                      u551 0EE4                        u711 007E                        u640 049F  
                      u560 0FB9                        u720 0090                        u800 05E9  
                      u641 049E                        u625 043F                        u561 0FB8  
                      u721 008F                        u801 05E8                        u490 0F5F  
                      u650 04A6                        u570 0FC6                        u730 00B4  
                      u491 0F5E                        u651 04A5                        u571 0FC2  
                      u731 00B3                        u715 007B                        u660 0539  
                      u740 0549                        u900 0764                        u661 0538  
                      u645 049B                        u805 05E5                        u741 0548  
                      u901 0763                        u590 0FE7                        u670 0692  
                      u750 0561                        u591 0FE6                        u671 0691  
                      u735 00B0                        u751 0560                        u584 0FC9  
                      u680 06CD                        u760 057A                        u665 0535  
                      u681 06CC                        u761 0579                        u745 0545  
                      u690 00ED                        u770 0591                        u691 00EC  
                      u771 0590                        u755 055D                        u780 05AE  
                      u685 06C9                        u781 05AD                        u765 0576  
                      u790 05B4                        u695 00E9                        u791 05B3  
                      u775 058D                        u880 0728                        u890 0747  
                      u977 0083                        u987 00B8                        u997 06A5  
                      fsr0 0004                        indf 0000                       ?_ISR 0070  
                     l1301 0FCA                       l1311 0FFD                       l1303 0FD1  
                     l1241 0F6C                       l1313 0EF3                       l1305 0FE0  
                     l1401 06AC                       l1251 0F2D                       l1243 0F73  
                     l1235 0F57                       l1331 044A                       l1323 03F0  
                     l1315 03E9                       l1307 0FE7                       l1403 06AD  
                     l1261 0F3E                       l1253 0F31                       l1245 0F79  
                     l1237 0F5B                       l1341 0492                       l1325 0430  
                     l1317 03EE                       l1309 0FEB                       l1421 06CD  
                     l1405 06AE                       l1501 0093                       l1255 0F35  
                     l1239 0F5F                       l1351 04A8                       l1343 04A0  
                     l1327 0436                       l1511 00EE                       l1271 0F15  
                     l1431 06DA                       l1423 06D4                       l1415 06B2  
                     l1407 06AF                       l1503 009F                       l1257 0F37  
                     l1249 0F2C                       l1353 0526                       l1345 04A6  
                     l1337 044C                       l1329 0444                       l1513 00F3  
                     l1281 0F40                       l1265 0ED9                       l1273 0F24  
                     l1361 0F88                       l1441 06F4                       l1433 06DB  
                     l1425 06D7                       l1417 06B8                       l1409 06B0  
                     l1505 00A7                       l1521 0550                       l1259 0F39  
                     l1355 052C                       l1339 048C                       l1283 0F46  
                     l1267 0EDC                       l1275 0F26                       l1291 0FA8  
                     l1363 0F8D                       l1451 070C                       l1443 06F5  
                     l1435 06DC                       l1427 06D8                       l1419 06C0  
                     l1371 0692                       l1507 00B4                       l1531 0568  
                     l1523 0550                       l1515 053A                       l1611 0713  
                     l1285 0F49                       l1269 0EE0                       l1277 0F27  
                     l1293 0FAD                       l1365 0F92                       l1357 0EC3  
                     l1453 070F                       l1445 06F6                       l1437 06E2  
                     l1429 06D9                       l1381 069A                       l1373 0694  
                     l1509 00BB                       l1541 0582                       l1533 056B  
                     l1517 0549                       l1525 0552                       l1621 073D  
                     l1613 0718                       l1287 0F50                       l1279 0ECE  
                     l1295 0FB0                       l1367 0F9F                       l1359 0F7E  
                     l1455 0710                       l1447 06F7                       l1439 06F1  
                     l1391 069F                       l1383 069B                       l1375 0697  
                     l1471 0056                       l1551 059D                       l1543 0591  
                     l1535 057A                       l1527 0561                       l1519 054E  
                     l1631 0773                       l1623 0754                       l1615 0718  
                     l1289 0F53                       l1297 0FB1                       l1457 0711  
                     l1449 06FD                       l1393 06A0                       l1385 069C  
                     l1377 0698                       l1369 0688                       l1481 005E  
                     l1473 005B                       l1465 00C4                       l1561 05A3  
                     l1545 0595                       l1537 057E                       l1529 0565  
                     l1633 0779                       l1625 075C                       l1617 071E  
                     l1299 0FB9                       l1395 06A1                       l1387 069D  
                     l1379 0699                       l1483 006A                       l1475 005C  
                     l1491 008A                       l1467 00D8                       l1459 00C2  
                     l1571 05D4                       l1563 05AE                       l1555 05A1  
                     l1635 077E                       l1627 0764                       l1619 0735  
                     l1397 06A8                       l1389 069E                       l1493 0090  
                     l1485 0072                       l1469 00E0                       l1573 05DC  
                     l1565 05B4                       l1549 0599                       l1629 076F  
                     l1399 06AB                       l1495 0091                       l1487 007F  
                     l1489 0086                       l1569 05C1             _text_to_buffer 00BF  
                     u1007 06D1                       u1017 06EE                       u1027 0709  
              main@screen1 0053                main@screen2 004B                       _main 0713  
                     btemp 007E                       start 0010          ___bmul@multiplier 0028  
                    ??_ISR 0074           send_buffer@i_585 002B        spi_init@sdo_tx_edge 0028  
             ?_load_buffer 002C          _volume_conversion 053A                      ?_main 0043  
          ?_interrupt_init 0070                      _ANSEL 0188                      i1l160 07C2  
                    i1l156 07F1                      i1l166 07F6                      i1l176 067A  
       ?_volume_conversion 0070                      _PORTA 0005                      _PORTB 0006  
                    _PORTC 0007                      _PORTD 0008                      _PORTE 0009  
                    u81_20 079C                      u81_21 079B                      _TRISA 0085  
                    _TRISB 0086                      _TRISC 0087                      _TRISD 0088  
                    _TRISE 0089                      u82_20 07A1                      u82_21 07A0  
                    u83_20 07AD                      u91_20 05F0                      u83_21 07AC  
                    u91_21 05EF                      u84_20 07B7                      u92_20 0640  
                    u84_21 07B6                      u92_21 063F                      u92_25 063C  
                    u85_20 07CD                      u93_20 0649                      u85_21 07CC  
                    u93_21 0648                      u86_20 07DA                      u94_20 0660  
                    u86_21 07D9                      u94_21 065F                      u94_25 065C  
                    u87_20 07E5                      u95_20 0668                      u87_21 07E4  
                    u95_21 0667                      u96_20 0675                      u96_21 0674  
   __end_of_text_to_buffer 00EE                      _ascii 0112                      _count 0065  
      ??_volume_conversion 003E                      pclath 000A                      status 0003  
                    wtemp0 007E            __initialization 0013               __end_of_main 0785  
__end_of_volume_conversion 05EA               ?_scherm_init 0070                     ??_main 0047  
     text_to_buffer@scherm 0040          send_buffer@scherm 0028            ?_text_to_buffer 003E  
             ?_send_buffer 0070                     _ADRESH 001E                     _ADRESL 009E  
      load_buffer@position 002C                     _ANSELH 0189           __end_of_adc_init 0F57  
                   u103_27 0787                     i1l1601 07DA                     i1l1603 07DE  
                   i1l1605 07E5                     i1l1607 07EC                     i1l1609 07F5  
                   i1l1641 05F8                     i1l1651 0660                     i1l1643 0615  
                   i1l1581 079C                     i1l1653 0668                     i1l1645 0640  
                   i1l1637 05EA                     i1l1591 07B7                     i1l1583 07A1  
                   i1l1575 0785                     i1l1655 066E                     i1l1647 0649  
                   i1l1639 05F0                     i1l1593 07BE                     i1l1585 07A7  
                   i1l1577 078A                     i1l1649 0650                     i1l1657 0671  
                   i1l1587 07AD                     i1l1595 07C7                     i1l1579 0797  
                   i1l1659 0675                     i1l1597 07CD                     i1l1589 07B1  
                   i1l1599 07D3                     _SSPBUF 0013            _rotaryHandeling 0785  
                   ___bmul 0F29                     ___wmul 0F57           __end_of_init_osc 0EE6  
         __end_of_pic_init 0FA5              ISR@lowerValue 0022                     _volume 0068  
            spi_transmit@c 0026   __end_of_input_conversion 0100               __pdataCOMMON 007B  
                   saved_w 007E           __end_of_spi_init 1000    __end_of__initialization 004F  
              ISR@adcValue 0024            text_to_buffer@i 0041       load_buffer@character 0037  
      ___bmul@multiplicand 0026             __pcstackCOMMON 0070               __pidataBANK0 0EE6  
             __pidataBANK1 07F7              __end_of_ascii 0392              ISR@upperValue 0020  
 scherm_init@controlWord_0 002C   scherm_init@controlWord_1 002B    __end_of_rotaryHandeling 07F7  
               __pbssBANK0 0068                 __pbssBANK1 00A0                 __pbssBANK3 0190  
  volume_conversion@buffer 003E      text_to_buffer@newtext 003E                 __pmaintext 0713  
                  ?___bmul 0026                    ?___wmul 0026           ??_interrupt_init 0026  
               __pintentry 0004          __end_of_adcBounds 03E6                  ?_adc_init 0070  
               __stringtab 0100           load_buffer@i_591 003A           load_buffer@i_592 003C  
                ?_init_osc 0070                  ?_pic_init 0070               load_buffer@i 0038  
                ?_spi_init 0026                  _ANSELbits 0188                 ??_adc_init 0026  
                  __ptext1 053A                    __ptext2 00BF                    __ptext3 0053  
                  __ptext4 0685                    __ptext5 0EC0                    __ptext6 0F7E  
                  __ptext7 0FA5                    __ptext8 0F15                    __ptext9 0ECE  
         ??_text_to_buffer 003F                    clrloop0 0EC7       end_of_initialization 004F  
         ?_rotaryHandeling 0070          __end_of_pins_init 0ED9                 ??_init_osc 0026  
               ??_pic_init 002A                 ??_spi_init 0029               __pstringtext 0100  
                _PORTBbits 0006                  _PORTCbits 0007                  _PORTDbits 0008  
        ?_input_conversion 0070                  _TRISBbits 0086                  _TRISCbits 0087  
                _TRISEbits 0089         ??_input_conversion 003E                 _ports_init 0F15  
            ?_spi_transmit 0070         spi_init@sdi_rx_smp 0026                 _switchLeds 0063  
           __end_of___bmul 0F40             __end_of___wmul 0F7E              __pidataCOMMON 0EBE  
      start_initialization 0013                __end_of_ISR 0685             ??_spi_transmit 0026  
    input_conversion@input 003E                   ??___bmul 0027                   ??___wmul 002A  
               init_fetch0 0F02                __pdataBANK0 005B                __pdataBANK1 00C8  
            ??_load_buffer 002F                  _adcBounds 0392                __pbssCOMMON 007D  
                ___latbits 0002              __pcstackBANK0 0020      scherm_init@helderheid 002A  
              ?_ports_init 0070     volume_conversion@value 0042    rotaryHandeling@oldstate 007D  
             scherm_init@i 0028              ??_scherm_init 0027        __end_of_load_buffer 053A  
            ??_send_buffer 0027                  _miniCount 007B          spi_init@clock_pol 0027  
        interrupt_function 0004             ___wmul@product 002A                   _IOCBbits 0096  
                clear_ram0 0EC6                   _PIE1bits 008C                  _pins_init 0ECE  
                 _PIR1bits 000C                  main@F1490 005B                  main@F1492 00C8  
               _ADCON0bits 001F                __stringbase 0112                 _ADCON1bits 009F  
     __end_of_spi_transmit 0EC6          ___wmul@multiplier 0026               send_buffer@i 0029  
      __end_of_scherm_init 0713        __end_of_send_buffer 00BF          load_buffer@scherm 002E  
               ?_pins_init 0070                _load_buffer 03E6         __end_of__stringtab 0112  
                 _adc_init 0F40                   __ptext10 0EF3                   __ptext11 0ED9  
                 __ptext12 0F40                   __ptext13 00EE                   __ptext14 03E6  
                 __ptext15 0F57                   __ptext16 0F29                   __ptext17 05EA  
                 __ptext18 0785                   _init_osc 0ED9                   _pic_init 0F7E  
                 _spi_init 0FA5                   main@argc 0043                   main@argv 0045  
              _scherm_init 0685                 _INTCONbits 000B                   init_ram0 0F06  
             ??_ports_init 0026                _send_buffer 0053                   intlevel1 0000  
                stringcode 010A                ??_pins_init 0026                 _OSCCONbits 008F  
       __end_of_ports_init 0F29          ??_rotaryHandeling 0070               _nummerOffset 0067  
     rotaryHandeling@state 0073             _interrupt_init 0EF3                   stringtab 0100  
           _scherm1_buffer 00A0         volume_conversion@i 0040             _scherm2_buffer 0190  
             _spi_transmit 0EC0           _input_conversion 00EE                 _SSPCONbits 0014  
